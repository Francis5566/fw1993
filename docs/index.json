[{"authors":["admin"],"categories":null,"content":"Former Networking R\u0026amp;D Engineer. Self-taught backend engineer and data engineer.\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://goatwu1993.github.io/blog/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/authors/admin/","section":"authors","summary":"Former Networking R\u0026amp;D Engineer. Self-taught backend engineer and data engineer.","tags":null,"title":"Chao Yang Wu","type":"authors"},{"authors":null,"categories":[],"content":"What is Kafka Kafka 是一個資料流 \u0008/訊息處理平台(message/stream processing platform)，仲介處理端到端 Real-Time 的訊息傳輸。\nKafka 特點   提供 pub-sub 及 point-to-point 兩種 queue mode\n  優化過的 binary TCP-based protocol 及記憶體緩衝機制，多條訊息會先寫入記憶體緩衝中存成 Batcch 一同傳輸，可以減少網路封包的 Overhead。\n  對資料的包裝是輕量級的，且可壓縮。避免掉不必要的物件包覆，可以直接以檔案的型式來處理資料。\n  因為可以直接處理檔案資料，直接用 OS 的 page cache，不需要額外 Applicaion Cache 來競爭珍貴的記憶體空間。\n  Kafka 優點 Reliability 可靠 Kafka is distributed, partitioned, replicated and fault tolerance.\nScalability 可擴展性 Kafka 為分散式架構，可以 Zero downtime 輕鬆擴展\nDurability 耐用性 Kafka 使用分散式 commit log，訊息會被盡快的寫到磁碟上。\nPerformance Publish/subscribe 皆可以提供很高的 throughput\nDecoupling Producer/Consumer 只需要對 Topics 傳送訊息，可以降低系統間的耦合度。\nFault Tolerance Partition 的 replicating 容許些許 Broker 離線時服務仍正常運作。\nZero downtime Zero data loss Kafka Example applications  managing passenger and driver matching at Uber providing real-time analytics and predictive maintenance for British Gas’ smart home, performing numerous real-time services across all of LinkedIn.  ","date":1578570814,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578570814,"objectID":"a716eed61194119f90e92fed5f5d96ab","permalink":"https://goatwu1993.github.io/blog/posts/apache-kafka-part1/","publishdate":"2020-01-09T19:53:34+08:00","relpermalink":"/blog/posts/apache-kafka-part1/","section":"posts","summary":"What is Kafka Kafka 是一個資料流 \u0008/訊息處理平台(message/stream processing platform)，仲介處理端到端 Real-Time 的訊息傳輸。\nKafka 特點   提供 pub-sub 及 point-to-point 兩種 queue mode\n  優化過的 binary TCP-based protocol 及記憶體緩衝機制，多條訊息會先寫入記憶體緩衝中存成 Batcch 一同傳輸，可以減少網路封包的 Overhead。\n  對資料的包裝是輕量級的，且可壓縮。避免掉不必要的物件包覆，可以直接以檔案的型式來處理資料。\n  因為可以直接處理檔案資料，直接用 OS 的 page cache，不需要額外 Applicaion Cache 來競爭珍貴的記憶體空間。\n  Kafka 優點 Reliability 可靠 Kafka is distributed, partitioned, replicated and fault tolerance.\nScalability 可擴展性 Kafka 為分散式架構，可以 Zero downtime 輕鬆擴展\nDurability 耐用性 Kafka 使用分散式 commit log，訊息會被盡快的寫到磁碟上。","tags":["Hadoop","Kafka","BigData"],"title":"Apache Kafka - Part1","type":"posts"},{"authors":null,"categories":[],"content":"Kafka Architecture Picture from wiki\nProducers   Producers 將發送資料流到一至多個 Topics\n  Producer 使用 push(推)模式將訊息釋出到 Broker\n  實作 Kafka 提供的 Producer API\n  Consumers   Consumers 會訂閱一或多個 Topics\n  Consumer 使用 pull(拉)模式從 Broker 訂閱並消費訊息\n  實作 Kafka 提供的 Consumer API\n  Consumer Group   每個 Consumer 屬於一個特定的 Consumer Group\n  一則訊息可以發送到多個不同的 Consumer Group，但只能有一個 Consumer 消化該訊息\n  Brokers   仲介處理 Consumer 以及 Producers 的訊息\n  訊息會被分到不同的抽象類別，這種抽象類別稱為 Topic\n  一個 Topic 又被分為多個 Partition，Partition 物理意義上為磁碟的一塊連續區域，但 Topics 的每個 Partition 通常會在不同的節點上\n  一個 Partition 可能又會有多個副本，副本也分散在不同的節點\n  通常要求 Topics 的 Partition 的數量超過 Broker 的數量，否則達不到 Load distribution 的效果\n  Broker 是 Stateless 的\n  Broker controller 其中一個 Broker 會被推選為 Controller，Controller 會負責偵測 Broker 級別的 Failure，並幫忙所有受影響的 Partition 更換 Partition leader\nTopics   Topics 定義  Topics 為訊息的抽象分類 Producers 將發送資料流到一至多個 Topics，Consumers 則會訂閱一或多個 Topics Topic 根據設定分為多個 Partitions(最少一個) Topic 的 Partitions 通常分佈在不同的 Broker 節點 Topics 分為 Regular Topics 及 Compacted topics    Regular Topics  可以被設定一定的留存時間，若超國時間則 Kafka 可以刪除就資料已釋出硬碟空間，Default 留存時間為 7 天    Compacted topics  沒有有效期限 新訊息若 Key 重複，則會覆蓋舊的鍵值對 Producer 可發送值為 null 的鍵值對以永久刪除該資料，稱作 tombstone message    Partitions   Partitions 定義  一個 Topic 可以被分為多個 partitions(最少一個)，通常會設定多個 Partition 以處理任意大小的資料 Partition 是一個 Queue 的實作，訊息在裡面依據 index/offset 排序，順序不可變動 Partition 物理上是磁碟的連續區域，新訊息會被 append 到 partition 尾端，由於是順序寫磁碟，因此效率非常高    Partition offset  Message 在 partition 裡面會有唯一的 index，稱作 offset Offset 為 Long 型態    Replica  各個 Topics 可設定 Replication Factor 通常為 2 ~ 3，下面的所有 Partition 都會產生這麼多的副本 只要 Cluster，所有的 Partition 皆有一個副本在線，則服務不會中斷    Partition Leader  Partition Leader 由 Broker Controller 決定，每個 Partition 會有一個 Leader Partition Leader 負責所有 partition/replica 的讀/寫    Partition Follower  當 Leader 更新時，Follower 也需要跟著更新 Follower 平時是 Consumer，當 Leader 收到新的信息時 pull 並且寫入到自己的資料上 當 Leader 掛掉，Broker Controller 會選出其中一個 Follower 當作該 Partition 的 Leader    ISR  當 Leader 收到訊息時，所有 Follower 都需要寫入，已經和 Leader 同步的 Replica 稱為 ISRs(in-sync replica) Record 只有在全部的 ISR 都同步時，才被視為成功 Commited Consumer 只能從已經 Commit 成功的 Record 讀取紀錄    Kafka Cluster  超過一個以上的 Broker 稱作 Kafka Cluster Kafka cluster 可以 zero downtime 擴展 Clusters are used to manage the persistence and replication of message data. 通常都會做 Cluster 以實現 Load Balancing  ZooKeeper  管理叢集配置 負責管理及協調 Broker 通知 Producer 及 Consumer  新的 Broker 出現 Broker failure   當 Zookeeper 發出通知，Consumer 及 Producer 根據通知決定要使用哪一個 Broker  https://zookeeper.apache.org/   Reference  https://www.tutorialspoint.com/apache_kafka/apache_kafka_introduction.htm https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation) https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab https://stackoverflow.com/questions/50227472/how-kafka-guarantees-zero-downtime-and-zero-data-loss http://cloudurable.com/blog/kafka-architecture-topics/index.html  ","date":1578570814,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578570814,"objectID":"81c422663dd673a87660232a30565192","permalink":"https://goatwu1993.github.io/blog/posts/apache-kafka-2/","publishdate":"2020-01-09T19:53:34+08:00","relpermalink":"/blog/posts/apache-kafka-2/","section":"posts","summary":"Kafka Architecture Picture from wiki\nProducers   Producers 將發送資料流到一至多個 Topics\n  Producer 使用 push(推)模式將訊息釋出到 Broker\n  實作 Kafka 提供的 Producer API\n  Consumers   Consumers 會訂閱一或多個 Topics\n  Consumer 使用 pull(拉)模式從 Broker 訂閱並消費訊息\n  實作 Kafka 提供的 Consumer API\n  Consumer Group   每個 Consumer 屬於一個特定的 Consumer Group\n  一則訊息可以發送到多個不同的 Consumer Group，但只能有一個 Consumer 消化該訊息\n  Brokers   仲介處理 Consumer 以及 Producers 的訊息","tags":["Hadoop","Kafka","BigData"],"title":"Apache Kafka - Part2","type":"posts"},{"authors":null,"categories":["datastructure"],"content":"Dictionary Python Dictionary 的好大家都知道，這篇反過來用 Python 實作一個 Dictionary\n先開大招 直接偷看答案，看看 cpython 怎麼寫準沒錯，用 C 寫看起來就很難，還好 這邊 有一篇解釋，總之，key-value pair 用 hash table 是正義，實作上的眉眉角角才是重點。\nHash table 的好  O(1) insertion O(1) get O(1) delete  O(1) 94 狂，然而以上 O(1)的時間複雜度，都是指 average case 。\n當 entry 越來越滿，worst case 就容易發生，worst case 發生的機率和下面要講的 load factor 正相關。\nload factor \u0026amp; dynamic resizing wiki  load factor = n/k\n n is the number of entries occupied in the hash table. k is the number of buckets.  k 通常也被叫做 table size。有 n 筆資料，不會只開 n 個 entry，而是稍微大一些的 k 筆，所以 n 總共佔 k 的比例就是 load factor。\n 當 load factor 趨近 1，Worst Case 機率增加，平均查找時間 O(n) 當 load factor 趨近 0，Worst Case 機率較少，平均查找時間 O(1)。  實務上\n 開 Dictionary 要預估資料的筆數 n 很不實際 load factor 趨近於 0，雖然有 O(1)的查找，但 k \u0026raquo; n 表示要開很大的 table size 儲存相對很少的資料，很浪費空間。 load factro 趨近於 1，很省空間，但查找時間趨近 O(n)，失去 hash table 的初心。  因此一般來說， load factor 介於 0.6 至 0.7 ，算是空間時間比較平衡，根據 n 調整 k 的手段就是 dynamic resizing\nDictionary Node class DictionaryNode(): \u0026quot;\u0026quot;\u0026quot; Node of a DictionaryLinkedList. \u0026quot;\u0026quot;\u0026quot; def __init__(self, key, value, me_hash): self.key = key self.value = value self.me_hash = me_hash self.collided = False def __repr__(self): return (self.key.__repr__() + \u0026quot;: \u0026quot; + self.value.__repr__())  me_hash me_hash 是 key 的 hash 值，根據 cpython 以及講解，是 get 的時候比對會用到\n(ep-\u0026gt;me_key == key || (ep-\u0026gt;me_hash == hash \u0026amp;\u0026amp; unicode_eq(ep-\u0026gt;me_key, key)))  感覺是比對\n key 值本身 hash+unicode  兩者其中一個為 True 則判斷為 key 相同，詳細情形可能要對編碼比較熟才看得懂，這份 code 只有存起來放著等以， resize 就不需要重算一次。\ncollided 一個確認有沒有 collide 過的 flag\n  insert\n若 entry 已被佔用，則將此 entry 的 collided 屬性設定為 True，再往後面找。\n  delete\n若 collide 為 True，應該將 key, value 設定為 None 或是整個 node 換成另一種 class，告訴大家這 node 已經被刪除了，但你還是應該往後尋找。\n  get 的 pseudo code\n  def get(key): entry = me_hash(key) while is_valid(entry): if hash_table[entry] == None: # 這個Entry從來沒有被使用過 raise IndexError('key not exist') elif hash_table[entry] and \\ hash_table[entry].key != key and \\ not hash_table[entry].collided: # 此entry已經有值，但key不對，但沒有發生過collided\u0008=\u0026gt; # 只是剛好entry相同，且沒發生collide，直接返回indexError即可 raise IndexError('key not exist') elif hash_table[entry] and \\ hash_table[entry].key != key and \\ hash_table[entry].collided: # 此entry已經有值，但key不對，但有發生過collided =\u0026gt; # 往下查找 entry += 1 elif hash_table[entry] and \\ not hash_table[entry].key and \\ not hash_table[entry].value and hash_table[entry].collided: # 此Node被del，但為了提示之後要往後查找，流下 collided 屬性。 entry += 1 elif hash_table[entry] and hash_table[entry].key == key: return hash_table[entry].value  Dictionary Class class Dictionary(): \u0026quot;\u0026quot;\u0026quot; Dictionary are implemented by HashTable Using open addressing method. Hash using siphash. I can not find siphash \u0026quot;\u0026quot;\u0026quot; def __init__(self): self.used_entry = 0 self.buckets = [None for x in range(0, 8)]  先開一個大小為 8 的 list，由於沒有實作{}的讀取，因此 KVP 只能一個一個 set。\n另外由於不想每次要拿長度或是算 load factor 的時候都要去做一個 O(k)的 for loop，因此直接開一個欄位(self.used_entry)來記，insert/del 要記得 maintain。\nHash 仿照 cpython 用 siphash，據作者所述是一個相對平均且快速的 hash ，用過 md5 也是很 OK 的，只是轉成 int 相較麻煩，還要 digest 什麼的)，開頭要記得 import。\npip install siphash  from siphash import siphash24  Dictionary 的 me_hash() def me_hash(self, key): \u0026quot;\u0026quot;\u0026quot; hash of key \u0026quot;\u0026quot;\u0026quot; return siphash24(b'0123456789ABCDEF',(str(key).encode('utf-8'))).hash()  Resize (dynamic resizing) proper_size() 給定 n 筆 data，根據 load factor 的合理範圍算出合適的 data_size，原則\n 1/3 \u0026lt; n/proper_size \u0026lt; 2/3 proper_size 為 2 的任意正整數次方(2^integer)  resize() 任何牽涉到 len 增加/減少時都應該呼叫，算出 proper_size，若 data_size 改變則把 buckets 裡面的東西全部 dump 到 new_buckets。\nbitmask (\u0026amp;) 運算 當 k (table size) 是 2 的 m 次方，則 hash(n) mod k 可以用 hash(n) \u0026amp; bitmask 取代，其中 bitmask 為 m 個 1 組成。\nPython 命令列 demo\n\u0026gt;\u0026gt;\u0026gt; def hash(key): return siphash24(b'0123456789ABCDEF',(str(key).encode('utf-8'))).hash() ... \u0026gt;\u0026gt;\u0026gt; n = 'key_string' \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # m = 3, k = 8 ... \u0026gt;\u0026gt;\u0026gt; hash(n) \u0026amp; 0b111 == hash(n) \u0026amp; 7 True \u0026gt;\u0026gt;\u0026gt; hash(n) \u0026amp; 0b111 == hash(n) % 8 True \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; # m = 4, k = 16 ... \u0026gt;\u0026gt;\u0026gt; hash(n) \u0026amp; 0b1111 == hash(n) \u0026amp; 15 True \u0026gt;\u0026gt;\u0026gt; hash(n) \u0026amp; 0b1111 == hash(n) % 16 True \u0026gt;\u0026gt;\u0026gt;  resize 程式碼 def resize(self): \u0026quot;\u0026quot;\u0026quot; Should change the size if load_factor \u0026gt; 2/3 or load_factor \u0026lt; 2/3 Should do nothing if load_factor between 1/3 and 2/3 \u0026quot;\u0026quot;\u0026quot; def proper_size(n, k): pro_size = 8 if n \u0026lt;= 2 else 2**(int(n * 1.5)).bit_length() return pro_size used = self.used_entry old_size = len(self.buckets) new_size = proper_size(used, old_size) if old_size == new_size: return new_buckets = [None for x in range(0, new_size)] for i in range(old_size): if self.buckets[i] and (self.buckets[i].key is not None): key_me_hash = self.buckets[i].me_hash # \u0026amp; for bitwise operation (bitmask) entry = key_me_hash \u0026amp; (new_size-1) while new_buckets[entry]: new_buckets[entry].collided = True entry = entry+1 if entry \u0026lt; (new_size-2) else 0 new_buckets[entry] = self.buckets[i] new_buckets[entry].collided = False self.buckets = new_buckets  實作 insert/find/delete python Magic Methods 為了讓這個 class 更像內建的 dictionary，需要實作幾個 python 內建的 Magic Methods\n# __setitem__ a[b] = c # __getitem__ a[b] # __len__ len(a) # __delitem__ del a[b]  總的來說就是需要把以上幾個 Magic Methods 實作。\nOpen Addressing 這裡用的是最簡單的 open addressing，entry 被佔據就找下一個，比較簡單，但容易有連續一整攤都被 occupied 的情形發生，如果有興趣可以實作其他的 open addressing 算法。\nMagic Methods 程式碼 def __repr__(self): s = '' for i in range(len(self.buckets)): if self.buckets[i]: s = s + self.buckets[i].__repr__() + ', ' return {} if not s else \u0026quot;{{{0}}}\u0026quot;.format(s[:-3]) def __getitem__(self, key): key_me_hash = self.me_hash(key) l = len(self.buckets) entry = key_me_hash \u0026amp; (l-1) while self.buckets[entry]: if self.buckets[entry].key == key: return self.buckets[entry].value if not self.buckets[entry].collided: raise KeyError(key) entry = entry+1 if entry \u0026lt; (l-2) else 0 raise KeyError(key) def __setitem__(self, key, value): self.used_entry += 1 self.resize() l = len(self.buckets) key_me_hash = self.me_hash(key) entry = key_me_hash \u0026amp; (l-1) while self.buckets[entry]: self.buckets[entry].collided = True entry = entry+1 if entry \u0026lt; (l-2) else 0 self.buckets[entry] = DictionaryNode(key=key, value=value, me_hash=key_me_hash) def __delitem__(self, key): key_me_hash = self.me_hash(key) l = len(self.buckets) entry = key_me_hash \u0026amp; (l-1) while self.buckets[entry]: if self.buckets[entry].key == key: self.buckets[entry].key = None self.buckets[entry].value = None self.buckets[entry].me_hash = None return if not self.buckets[entry].collided: raise KeyError(key) entry = entry+1 if entry \u0026lt; (l-2) else 0 raise KeyError(key) def __len__(self): counter = 0 for i in range(len(self.buckets)): if self.buckets[i]: counter += 1 return counter  完整程式碼  Github Reference 最後附上參考資料，建議看第一個，講的很清楚，有一些太難的地方我也沒有仔細看懂就寫完了\u0026hellip;\n  大神解說   wiki   cpython   Magic Method   ","date":1577359038,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577359038,"objectID":"908b5d88ff19fc0533f9b64217c18ca0","permalink":"https://goatwu1993.github.io/blog/posts/dict-python-implementation/","publishdate":"2019-12-26T19:17:18+08:00","relpermalink":"/blog/posts/dict-python-implementation/","section":"posts","summary":"Dictionary Python Dictionary 的好大家都知道，這篇反過來用 Python 實作一個 Dictionary\n先開大招 直接偷看答案，看看 cpython 怎麼寫準沒錯，用 C 寫看起來就很難，還好 這邊 有一篇解釋，總之，key-value pair 用 hash table 是正義，實作上的眉眉角角才是重點。\nHash table 的好  O(1) insertion O(1) get O(1) delete  O(1) 94 狂，然而以上 O(1)的時間複雜度，都是指 average case 。\n當 entry 越來越滿，worst case 就容易發生，worst case 發生的機率和下面要講的 load factor 正相關。\nload factor \u0026amp; dynamic resizing wiki  load factor = n/k\n n is the number of entries occupied in the hash table.","tags":["python","datastructure"],"title":"Python 實作 Dictionary","type":"posts"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic's Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes .  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://goatwu1993.github.io/blog/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/blog/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":["shell","macos"],"content":"1. Homebrew  macOS 包管理器 官網 https://brew.sh/ 包列表 https://formulae.brew.sh/  2. iTerm2  選取優化，選取即複製  3. GNU Stow  Symlink 管理器。 用來將 dotfiles 用 symlink 連到 repo 裡面整包上傳 Github 官網 https://www.gnu.org/software/stow  3. zsh  Z shell 支援 autosuggestion, autocompletion 及 syntax highlighting 支援部分 bash, ksh 及 tcsh 語法 zshrc 懶人包 https://github.com/unixorn/zsh-quickstart-kit  4. vscode  \u0008VSCODE 插件懶人包 https://github.com/viatsko/awesome-vscode  5. vim  vimrc 懶人包 https://github.com/amix/vimrc vim 插件管理器 Vundle https://github.com/VundleVim/Vundle.vim  Reference  https://www.zhihu.com/question/27447370  ","date":1577531838,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577531838,"objectID":"dbcc99f849776c582f28ce6965e5dbbf","permalink":"https://goatwu1993.github.io/blog/posts/setting-macos-env/","publishdate":"2019-12-28T19:17:18+08:00","relpermalink":"/blog/posts/setting-macos-env/","section":"posts","summary":"1. Homebrew  macOS 包管理器 官網 https://brew.sh/ 包列表 https://formulae.brew.sh/  2. iTerm2  選取優化，選取即複製  3. GNU Stow  Symlink 管理器。 用來將 dotfiles 用 symlink 連到 repo 裡面整包上傳 Github 官網 https://www.gnu.org/software/stow  3. zsh  Z shell 支援 autosuggestion, autocompletion 及 syntax highlighting 支援部分 bash, ksh 及 tcsh 語法 zshrc 懶人包 https://github.com/unixorn/zsh-quickstart-kit  4. vscode  \u0008VSCODE 插件懶人包 https://github.com/viatsko/awesome-vscode  5. vim  vimrc 懶人包 https://github.com/amix/vimrc vim 插件管理器 Vundle https://github.com/VundleVim/Vundle.vim  Reference  https://www.","tags":["linux","macos","vim","shell"],"title":"macOS developer environments","type":"posts"},{"authors":null,"categories":["git"],"content":"新增 submodule git submodule add git@github.com:xxx dir_name  移除 submodule git rm --cached [欲移除的目錄] rm -rf [欲移除的目錄]  修改 .gitmodules vim .gitmodules  修改 .git/config vim .git/config  最後再 commit，改變整個 Repository。\n$ git add .gitmodules $ git commit -m \u0026quot;Remove a submodule\u0026quot;  安全起見再做個 sync git submodule sync  參考資料  網站一 ","date":1577453572,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577453572,"objectID":"b563f90194d53a2eb9278129b38651e3","permalink":"https://goatwu1993.github.io/blog/posts/git-cheatsheet-submodule/","publishdate":"2019-12-27T21:32:52+08:00","relpermalink":"/blog/posts/git-cheatsheet-submodule/","section":"posts","summary":"新增 submodule git submodule add git@github.com:xxx dir_name  移除 submodule git rm --cached [欲移除的目錄] rm -rf [欲移除的目錄]  修改 .gitmodules vim .gitmodules  修改 .git/config vim .git/config  最後再 commit，改變整個 Repository。\n$ git add .gitmodules $ git commit -m \u0026quot;Remove a submodule\u0026quot;  安全起見再做個 sync git submodule sync  參考資料  網站一 ","tags":["git"],"title":"git cheatsheet","type":"posts"},{"authors":null,"categories":["hugo"],"content":"Hugo 使用 安裝 brew install hugo  第一次使用 hugo new site quickstart  測試 #!/bin/bash cd quickstart hugo hugo server  部署 注意 content 寫完輸入 hugo 並不會自動刪除目標資料夾，手動刪除再跑一次 hugo 。\nrm -rf ./docs hugo  新增文章 hugo new posts/my-first-post.md  參考資料   Hugo 官網   ","date":1577453572,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577453572,"objectID":"a48dc588304090050cf5fbf61784681a","permalink":"https://goatwu1993.github.io/blog/posts/hugo-cheatsheet/","publishdate":"2019-12-27T21:32:52+08:00","relpermalink":"/blog/posts/hugo-cheatsheet/","section":"posts","summary":"Hugo 使用 安裝 brew install hugo  第一次使用 hugo new site quickstart  測試 #!/bin/bash cd quickstart hugo hugo server  部署 注意 content 寫完輸入 hugo 並不會自動刪除目標資料夾，手動刪除再跑一次 hugo 。\nrm -rf ./docs hugo  新增文章 hugo new posts/my-first-post.md  參考資料   Hugo 官網   ","tags":["hugo"],"title":"Hugo cheatsheet","type":"posts"},{"authors":null,"categories":["hugo"],"content":"本篇記錄如何使用 hugo 線上的 themes\nHugo themes  Hugo 官方線上 themes a. 直接 submodule 不考慮更改 themes 的 partial/layout/css 的話，直接照抄就好\n# submodule cd ./themes git submodule add https://github.com/avianto/hugo-kiera.git kiera  b. fork 再 submodule 如果需要更改 partial/layout/css 的話請選擇 fork\n# fork cd ./themes git clone https://github.com/$你的Id/hugo-kiera.git kiera  修改 config.toml theme = \u0026quot;kiera\u0026quot;  ","date":1577453572,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577453572,"objectID":"38cc995656c6642327d0bdfc742fe011","permalink":"https://goatwu1993.github.io/blog/posts/hugo-themes/","publishdate":"2019-12-27T21:32:52+08:00","relpermalink":"/blog/posts/hugo-themes/","section":"posts","summary":"本篇記錄如何使用 hugo 線上的 themes\nHugo themes  Hugo 官方線上 themes a. 直接 submodule 不考慮更改 themes 的 partial/layout/css 的話，直接照抄就好\n# submodule cd ./themes git submodule add https://github.com/avianto/hugo-kiera.git kiera  b. fork 再 submodule 如果需要更改 partial/layout/css 的話請選擇 fork\n# fork cd ./themes git clone https://github.com/$你的Id/hugo-kiera.git kiera  修改 config.toml theme = \u0026quot;kiera\u0026quot;  ","tags":["hugo","git"],"title":"Hugo themes","type":"posts"},{"authors":["Chao Yang Wu"],"categories":null,"content":" Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math .\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://goatwu1993.github.io/blog/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/blog/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic  Academic | Documentation  Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click  PDF Export : E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let's make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions?  Ask  Documentation ","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://goatwu1993.github.io/blog/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/blog/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":["shell"],"content":"Greatest command of all time #!/bin/bash # manual man anything info anything anything --help  General commands Getting information #!/bin/bash # Show shell name. echo $SHELL echo $0 # Show shell version. $SHELL --version # Clear terminal. clear # Show command history. history # Print working directory pwd # Show system info uname -a # uptime uptime  File managing #!/bin/bash # List the files in working directory. ls # List all files, hidden file included, with detailed information. ls -la # Change ownership of a file. chown # Change an ownership of a file. chown nobody.nogroup your_file_name # Recursively change all file under this directory. chown -R nobody.nogroup . # Change the read/write permission of a file chmod # Make file r/w/e able for all user \u0026amp; group. chmod 777 file_name   Network #!/bin/bash # Show network interface config/info. ifconfig # get public ip curl icanhazip.com # Show network status netstat # Show all, include tcp/udp port. netstat -an # Show established connection netstat -antu | grep 'ESTABLISHED' # Show kernel routing information netstat -r netstat -tulnp # Check the bridge Interface brtcl brctl addbr \u0026lt;name\u0026gt; # ssh ssh # Generate a new ssh-key. Usually used when attempt to ssh a address which has change device/remote host. Use this when encounter error message: WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! ssh-keygen # scp scp   CPU, memery, task \u0026amp; process Check and monitor process #!/bin/bash # List all process run by user shell ps # List all process, even by status ps aux # pstree pstree # Monitor the process status top # cpu top -o cpu # memery top -o rsize # List cronjob crontab # List all cronjob. crontab -l  Sending signal or kill process #!/bin/bash # Send a signal to a process kill -signal PID # Send 15 SIGTERM to a process kill $pid # killall allow you to kill app with name instead of pid killall -9 $processname # Ask before terminate killall -i -9 $processname  Memory usage #!/bin/bash # Show recent memory usage free -m  參考資料   geekflare   鳥哥第十六章、程序管理與 SELinux 初探   ","date":1528622414,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1528622414,"objectID":"4004b9ae733a2a549fff34b25092832f","permalink":"https://goatwu1993.github.io/blog/posts/bash-cheat-list/","publishdate":"2018-06-10T17:20:14+08:00","relpermalink":"/blog/posts/bash-cheat-list/","section":"posts","summary":"Greatest command of all time #!/bin/bash # manual man anything info anything anything --help  General commands Getting information #!/bin/bash # Show shell name. echo $SHELL echo $0 # Show shell version. $SHELL --version # Clear terminal. clear # Show command history. history # Print working directory pwd # Show system info uname -a # uptime uptime  File managing #!/bin/bash # List the files in working directory. ls # List all files, hidden file included, with detailed information.","tags":["shell","bash"],"title":"bash cheatsheet","type":"posts"},{"authors":null,"categories":["networking"],"content":"OSI 7 Layres  Application Layer (Layer 7)  HTTP, HTTPS L7 firewall   Presentation Layer (Layer 6) Session Layer (Layer 5)  Sessions   Transport Layer (Layer 4)  TCP, UDP, SCTP, TLS   Network Layer (Layer 3)  IP Address Router, Layer 3 Switch   Data Link Layer (Layer 2)  Ethernet, 802.11(Wi-Fi), MAC Address Layer 2 Switch   Physical Layer (Layer 1)  Hub, Wire, Fiber, Radio    TCP/IP protocols  HTTP  Hyper Text Transport Protocol TCP Port 80   HTTPS  Hyper Text Transport Protocol Secure TCP Port 443   FTP  File Transfer Protocol TCP Port 21   Telnet  Telecommunication Protocol TCP Port 23   SMTP  Simple Mail Transfer Protocol TCP port 25 For email   DNS  Domain Name System UDP Port 53  Some famous public DNS servers    TFTP  Trivial File Transfer Protocol UDP port 69 Not secure. Should only be used in private net.   RADIUS  Remote Authentication Dial-In User Service UDP Port : 1812 (authentication) \u0026amp; 1813(accounting) Code  Access-Request Access-Accept Access-Reject Access-Challenge      ","date":1526009361,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1526009361,"objectID":"9482274025b8be116ae61f8ea23b0cfd","permalink":"https://goatwu1993.github.io/blog/posts/networking-cheatsheet/","publishdate":"2018-05-11T11:29:21+08:00","relpermalink":"/blog/posts/networking-cheatsheet/","section":"posts","summary":"OSI 7 Layres  Application Layer (Layer 7)  HTTP, HTTPS L7 firewall   Presentation Layer (Layer 6) Session Layer (Layer 5)  Sessions   Transport Layer (Layer 4)  TCP, UDP, SCTP, TLS   Network Layer (Layer 3)  IP Address Router, Layer 3 Switch   Data Link Layer (Layer 2)  Ethernet, 802.11(Wi-Fi), MAC Address Layer 2 Switch   Physical Layer (Layer 1)  Hub, Wire, Fiber, Radio    TCP/IP protocols  HTTP  Hyper Text Transport Protocol TCP Port 80   HTTPS  Hyper Text Transport Protocol Secure TCP Port 443   FTP  File Transfer Protocol TCP Port 21   Telnet  Telecommunication Protocol TCP Port 23   SMTP  Simple Mail Transfer Protocol TCP port 25 For email   DNS  Domain Name System UDP Port 53  Some famous public DNS servers    TFTP  Trivial File Transfer Protocol UDP port 69 Not secure.","tags":["networking"],"title":"TCP/IP cheatsheet","type":"posts"},{"authors":null,"categories":["hugo"],"content":"個人網頁怎麼建立 大概可分為\n 自己架站，例如 aws, vps, heroku 靜態網頁，例如 github / google docs 等 平台，例如Wordpress, Medium, HackMD  靜態網頁生成器(static site generator)  某些文件存放服務支援存放html可自動變成網站，如github, google docs等等。 靜態網頁生成器，可以將文檔(通常是 Markdwon)，直接轉換成 html ，搭配支援靜態網頁的服務就是簡單的網站 現在流行的靜態網頁生成器有 Jekyll, Hexo, Hugo 注意：靜態網頁生成器要開啟留言功能是比較麻煩的，需要另外配合 disqus 或是 gitment。 \u0008  結論 最後選了 Hugo\n優點  很快 很多theme可選 可寫Markdown 支援Syntax高光 可上傳Github  缺點  各theme之間差異過大，沒辦法說換就換 難上手  如果不在意主題或是Github的話可以考慮Hackmd。\n","date":1523013574,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1523013574,"objectID":"9791d844b6c53aae734a32ed5e391227","permalink":"https://goatwu1993.github.io/blog/posts/hugo/","publishdate":"2018-04-06T19:19:34+08:00","relpermalink":"/blog/posts/hugo/","section":"posts","summary":"個人網頁怎麼建立 大概可分為\n 自己架站，例如 aws, vps, heroku 靜態網頁，例如 github / google docs 等 平台，例如Wordpress, Medium, HackMD  靜態網頁生成器(static site generator)  某些文件存放服務支援存放html可自動變成網站，如github, google docs等等。 靜態網頁生成器，可以將文檔(通常是 Markdwon)，直接轉換成 html ，搭配支援靜態網頁的服務就是簡單的網站 現在流行的靜態網頁生成器有 Jekyll, Hexo, Hugo 注意：靜態網頁生成器要開啟留言功能是比較麻煩的，需要另外配合 disqus 或是 gitment。 \u0008  結論 最後選了 Hugo\n優點  很快 很多theme可選 可寫Markdown 支援Syntax高光 可上傳Github  缺點  各theme之間差異過大，沒辦法說換就換 難上手  如果不在意主題或是Github的話可以考慮Hackmd。","tags":["hugo"],"title":"Hugo","type":"posts"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://goatwu1993.github.io/blog/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/blog/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://goatwu1993.github.io/blog/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/blog/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Chao Yang Wu","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math .\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://goatwu1993.github.io/blog/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/blog/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Chao Yang Wu","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic's Markdown slides feature.   Supplementary notes can be added here, including code and math .\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://goatwu1993.github.io/blog/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/blog/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]