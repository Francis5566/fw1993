<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goatwu1993</title>
    <link>https://goatwu1993.github.io/blog/</link>
      <atom:link href="https://goatwu1993.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <description>goatwu1993</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>goatwu1993</title>
      <link>https://goatwu1993.github.io/blog/</link>
    </image>
    
    <item>
      <title>Docker P1</title>
      <link>https://goatwu1993.github.io/blog/posts/docker/docker-p1/</link>
      <pubDate>Wed, 15 Jan 2020 20:45:49 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/docker/docker-p1/</guid>
      <description>&lt;h2 id=&#34;container&#34;&gt;Container&lt;/h2&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;image&#34;&gt;Image&lt;/h3&gt;
&lt;h3 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h3&gt;
&lt;p&gt;描述單一映像檔的文件&lt;/p&gt;
&lt;h2 id=&#34;docker-engine&#34;&gt;Docker Engine&lt;/h2&gt;
&lt;h2 id=&#34;docker-machine&#34;&gt;Docker Machine&lt;/h2&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;docker-compose.yml 定義同時跑多容器 Docker App 的方法，例如：ZK + Kafka&lt;/p&gt;
&lt;h2 id=&#34;docker-swarm&#34;&gt;Docker Swarm&lt;/h2&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.techbridge.cc/2018/09/07/docker-compose-tutorial-intro/&#34;&gt;https://blog.techbridge.cc/2018/09/07/docker-compose-tutorial-intro/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker commands</title>
      <link>https://goatwu1993.github.io/blog/posts/docker/docker-commands/</link>
      <pubDate>Wed, 15 Jan 2020 20:36:03 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/docker/docker-commands/</guid>
      <description>&lt;h2 id=&#34;container&#34;&gt;container&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;docker-compose&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose ps
docker-compose ps -a

docker-compose down
docker-compose scale kafka=3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Apache Spark Setup</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-spark/spark-p2-setup/</link>
      <pubDate>Fri, 17 Jan 2020 20:33:38 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-spark/spark-p2-setup/</guid>
      <description>&lt;h2 id=&#34;spark-installation&#34;&gt;Spark Installation&lt;/h2&gt;
&lt;h2 id=&#34;prerequirement&#34;&gt;Prerequirement&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;macOS
&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;xcode-select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Apache Spark&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;test&#34;&gt;Test&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ spark-shell
...
...
...
scala&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20103839/ironman/1210&#34;&gt;https://ithelp.ithome.com.tw/users/20103839/ironman/1210&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://intellipaat.com/blog/tutorial/spark-tutorial/downloading-spark-and-getting-started/&#34;&gt;https://intellipaat.com/blog/tutorial/spark-tutorial/downloading-spark-and-getting-started/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Apache Spark</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-spark/spark-p1-whatis/</link>
      <pubDate>Fri, 17 Jan 2020 17:04:13 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-spark/spark-p1-whatis/</guid>
      <description>&lt;h2 id=&#34;what-is-spark&#34;&gt;What is Spark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spark 是一個開源叢集式運算，用來替代 Hadoop Map Reduce 的部分功能&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
Spark(Spark) --&amp;gt; Core(Spark Core)
Spark --&amp;gt; D(Spark SQL)
Spark --&amp;gt; E(Spark Streaming)
Spark --&amp;gt; F(MLlib)
Spark --&amp;gt; G(GraphX)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;spark-特點&#34;&gt;Spark 特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spark 允許用戶將資料載入至叢集記憶體，並多次對其進行查詢，非常適合用於機器學習演算法&lt;/li&gt;
&lt;li&gt;提供 Java, Scala, Python 及 R 語言 API&lt;/li&gt;
&lt;li&gt;記憶體內的快取資料集，可進行互動式資料分析(相對於 Hadoop MapReduce)&lt;/li&gt;
&lt;li&gt;Scala 或 Python 中的互動式命令列介面可降低橫向擴展資料探索的反應時間。&lt;/li&gt;
&lt;li&gt;Spark Streaming 對即時資料串流的處理具有可擴充性、高吞吐量、可容錯性等特點。&lt;/li&gt;
&lt;li&gt;Spark SQL 支援結構化和關聯式查詢處理（SQL）。&lt;/li&gt;
&lt;li&gt;MLlib 機器學習演算法和 Graphx 圖形處理演算法的高階函式庫。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-特點-1&#34;&gt;Spark 特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Memory Storage&lt;/li&gt;
&lt;li&gt;Immutability&lt;br&gt;
通過 Spark Core RDD 的概念來儲存數據，RDD 被創建之後沒有辦法修改，Transfromation 只會產生一個新的 RDD&lt;/li&gt;
&lt;li&gt;Lazy Evaluation&lt;br&gt;
數值直到 Action 才會被計算出來&lt;/li&gt;
&lt;li&gt;Partitioning&lt;br&gt;
計算會被指派到 RDD Partition，Partition 的數目直接關係到平行運算的程度。&lt;/li&gt;
&lt;li&gt;支援容錯機制&lt;br&gt;
紀錄各個 RDD 的產生過程(稱為 RDD Lineage)，當節點失效時可從 Parent RDD 重新推算失效節點的 Partition。&lt;/li&gt;
&lt;li&gt;容錯機制最佳化
Transfromation 函數分為寬依賴及窄依賴，窄依賴的情況下可直接用 Partition 推算 Child Partition，不需整組 RDD 從新推算。&lt;/li&gt;
&lt;li&gt;Persistence
可以根據資料是否會重新使用，指定存放在記憶體或磁碟。&lt;/li&gt;
&lt;li&gt;No Limitation&lt;br&gt;
RDD 的數目只需要考量記憶體以及硬碟，沒有確切數目上限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-core&#34;&gt;Spark Core&lt;/h2&gt;
&lt;p&gt;Spark Core 是整個專案的基礎，提供了分散式任務調度、排程及基本的 I/O，其基礎的程式抽象被稱為 Resilient Distributed Dataset (RDD)&lt;/p&gt;
&lt;h2 id=&#34;spark-sql&#34;&gt;Spark SQL&lt;/h2&gt;
&lt;p&gt;Spark SQL 在 Spark 核心上帶出一種名為 SchemaRDD 的資料抽象化概念，提供結構化和半結構化資料相關的支援。Spark SQL 提供了領域特定語言，可使用 Scala、Java 或 Python 來操縱 SchemaRDDs。它還支援使用使用命令行介面和 ODBC／JDBC 伺服器操作 SQL 語言。在 Spark 1.3 版本，SchemaRDD 被重新命名為 DataFrame。&lt;/p&gt;
&lt;h2 id=&#34;spark-streaming&#34;&gt;Spark Streaming&lt;/h2&gt;
&lt;p&gt;Spark Streaming 充分利用 Spark 核心的快速排程能力來執行串流分析。它擷取小批次的資料並對之執行 RDD 轉換。這種設計使串流分析可在同一個引擎內使用同一組為批次分析編寫而撰寫的應用程式碼。&lt;/p&gt;
&lt;h2 id=&#34;mllib&#34;&gt;MLlib&lt;/h2&gt;
&lt;p&gt;MLlib 是 Spark 上分散式機器學習框架。Spark 分散式記憶體式的架構比 Hadoop 磁碟式的 Apache Mahout 快上 10 倍，擴充性甚至比 Vowpal Wabbit 要好。MLlib 可使用許多常見的機器學習和統計演算法，簡化大規模機器學習時間&lt;/p&gt;
&lt;h2 id=&#34;graphx&#34;&gt;GraphX&lt;/h2&gt;
&lt;p&gt;GraphX 是 Spark 上的分散式圖形處理框架。它提供了一組 API，可用於表達圖表計算並可以類比 Pregel 抽象化。GraphX 還對這種抽象化提供了最佳化運行。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/Apache_Spark&#34;&gt;https://zh.wikipedia.org/zh-tw/Apache_Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-advantages-of-RDD&#34;&gt;https://www.quora.com/What-are-the-advantages-of-RDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/405603/&#34;&gt;https://codertw.com/程式語言/405603/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache Kafka - Part1</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-kafka/kafka-p1/</link>
      <pubDate>Thu, 09 Jan 2020 19:53:34 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-kafka/kafka-p1/</guid>
      <description>&lt;h2 id=&#34;what-is-kafka&#34;&gt;What is Kafka&lt;/h2&gt;
&lt;p&gt;Kafka 是一個資料流 /訊息處理平台(message/stream processing platform)，仲介處理端到端 Real-Time 的訊息傳輸。&lt;/p&gt;
&lt;h3 id=&#34;kafka-特點&#34;&gt;Kafka 特點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供 pub-sub 及 point-to-point 兩種 queue mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優化過的 binary TCP-based protocol 及記憶體緩衝機制，多條訊息會先寫入記憶體緩衝中存成 Batcch 一同傳輸，可以減少網路封包的 Overhead。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對資料的包裝是輕量級的，且可壓縮。避免掉不必要的物件包覆，可以直接以檔案的型式來處理資料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因為可以直接處理檔案資料，直接用 OS 的 page cache，不需要額外 Applicaion Cache 來競爭珍貴的記憶體空間。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-優點&#34;&gt;Kafka 優點&lt;/h2&gt;
&lt;h3 id=&#34;reliability-可靠&#34;&gt;Reliability 可靠&lt;/h3&gt;
&lt;p&gt;Kafka is distributed, partitioned, replicated and fault tolerance.&lt;/p&gt;
&lt;h3 id=&#34;scalability-可擴展性&#34;&gt;Scalability 可擴展性&lt;/h3&gt;
&lt;p&gt;Kafka 為分散式架構，可以 Zero downtime 輕鬆擴展&lt;/p&gt;
&lt;h3 id=&#34;durability-耐用性&#34;&gt;Durability 耐用性&lt;/h3&gt;
&lt;p&gt;Kafka 使用分散式 commit log，訊息會被盡快的寫到磁碟上。&lt;/p&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Publish/subscribe 皆可以提供很高的 throughput&lt;/p&gt;
&lt;h3 id=&#34;decoupling&#34;&gt;Decoupling&lt;/h3&gt;
&lt;p&gt;Producer/Consumer 只需要對 Topics 傳送訊息，可以降低系統間的耦合度。&lt;/p&gt;
&lt;h3 id=&#34;fault-tolerance&#34;&gt;Fault Tolerance&lt;/h3&gt;
&lt;p&gt;Partition 的 replicating 容許些許 Broker 離線時服務仍正常運作。&lt;/p&gt;
&lt;h3 id=&#34;zero-downtime&#34;&gt;Zero downtime&lt;/h3&gt;
&lt;h3 id=&#34;zero-data-loss&#34;&gt;Zero data loss&lt;/h3&gt;
&lt;h2 id=&#34;kafka-example-applications&#34;&gt;Kafka Example applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;managing passenger and driver matching at Uber&lt;/li&gt;
&lt;li&gt;providing real-time analytics and predictive maintenance for British Gas’ smart home,&lt;/li&gt;
&lt;li&gt;performing numerous real-time services across all of LinkedIn.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache Kafka - Part2</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-kafka/kafka-2/</link>
      <pubDate>Thu, 09 Jan 2020 19:53:34 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-kafka/kafka-2/</guid>
      <description>&lt;h2 id=&#34;kafka-architecture&#34;&gt;Kafka Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Overview_of_Apache_Kafka.svg/1920px-Overview_of_Apache_Kafka.svg.png&#34; alt=&#34;This is an image&#34;&gt;
Picture from wiki&lt;/p&gt;
&lt;h2 id=&#34;producers&#34;&gt;Producers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Producers 將發送資料流到一至多個 Topics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producer 使用 push(推)模式將訊息釋出到 Broker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實作 Kafka 提供的 Producer API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumers&#34;&gt;Consumers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consumers 會訂閱一或多個 Topics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer 使用 pull(拉)模式從 Broker 訂閱並消費訊息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實作 Kafka 提供的 Consumer API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumer-group&#34;&gt;Consumer Group&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每個 Consumer 屬於一個特定的 Consumer Group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一則訊息可以發送到多個不同的 Consumer Group，但只能有一個 Consumer 消化該訊息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;brokers&#34;&gt;Brokers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仲介處理 Consumer 以及 Producers 的訊息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訊息會被分到不同的抽象類別，這種抽象類別稱為 Topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 Topic 又被分為多個 Partition，Partition 物理意義上為磁碟的一塊連續區域，但 Topics 的每個 Partition 通常會在不同的節點上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 Partition 可能又會有多個副本，副本也分散在不同的節點&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常要求 Topics 的 Partition 的數量超過 Broker 的數量，否則達不到 Load distribution 的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broker 是 Stateless 的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;broker-controller&#34;&gt;Broker controller&lt;/h3&gt;
&lt;p&gt;其中一個 Broker 會被推選為 Controller，Controller 會負責偵測 Broker 級別的 Failure，並幫忙所有受影響的 Partition 更換 Partition leader&lt;/p&gt;
&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;topics-定義&#34;&gt;Topics 定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Topics 為訊息的抽象分類&lt;/li&gt;
&lt;li&gt;Producers 將發送資料流到一至多個 Topics，Consumers 則會訂閱一或多個 Topics&lt;/li&gt;
&lt;li&gt;Topic 根據設定分為多個 Partitions(最少一個)&lt;/li&gt;
&lt;li&gt;Topic 的 Partitions 通常分佈在不同的 Broker 節點&lt;/li&gt;
&lt;li&gt;Topics 分為 Regular Topics 及 Compacted topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;regular-topics&#34;&gt;Regular Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以被設定一定的留存時間，若超國時間則 Kafka 可以刪除就資料已釋出硬碟空間，Default 留存時間為 7 天&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;compacted-topics&#34;&gt;Compacted topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沒有有效期限&lt;/li&gt;
&lt;li&gt;新訊息若 Key 重複，則會覆蓋舊的鍵值對&lt;/li&gt;
&lt;li&gt;Producer 可發送值為 null 的鍵值對以永久刪除該資料，稱作 tombstone message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partitions&#34;&gt;Partitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;partitions-定義&#34;&gt;Partitions 定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 Topic 可以被分為多個 partitions(最少一個)，通常會設定多個 Partition 以處理任意大小的資料&lt;/li&gt;
&lt;li&gt;Partition 是一個 Queue 的實作，訊息在裡面依據 index/offset 排序，順序不可變動&lt;/li&gt;
&lt;li&gt;Partition 物理上是磁碟的連續區域，新訊息會被 append 到 partition 尾端，由於是順序寫磁碟，因此效率非常高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-offset&#34;&gt;Partition offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Message 在 partition 裡面會有唯一的 index，稱作 offset&lt;/li&gt;
&lt;li&gt;Offset 為 Long 型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;replica&#34;&gt;Replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;各個 Topics 可設定 Replication Factor 通常為 2 ~ 3，下面的所有 Partition 都會產生這麼多的副本&lt;/li&gt;
&lt;li&gt;只要 Cluster，所有的 Partition 皆有一個副本在線，則服務不會中斷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-leader&#34;&gt;Partition Leader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Partition Leader 由 Broker Controller 決定，每個 Partition 會有一個 Leader&lt;/li&gt;
&lt;li&gt;Partition Leader 負責所有 partition/replica 的讀/寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-follower&#34;&gt;Partition Follower&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當 Leader 更新時，Follower 也需要跟著更新&lt;/li&gt;
&lt;li&gt;Follower 平時是 Consumer，當 Leader 收到新的信息時 pull 並且寫入到自己的資料上&lt;/li&gt;
&lt;li&gt;當 Leader 掛掉，Broker Controller 會選出其中一個 Follower 當作該 Partition 的 Leader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;isr&#34;&gt;ISR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當 Leader 收到訊息時，所有 Follower 都需要寫入，已經和 Leader 同步的 Replica 稱為 ISRs(in-sync replica)&lt;/li&gt;
&lt;li&gt;Record 只有在全部的 ISR 都同步時，才被視為成功 Commited&lt;/li&gt;
&lt;li&gt;Consumer 只能從已經 Commit 成功的 Record 讀取紀錄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-cluster&#34;&gt;Kafka Cluster&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超過一個以上的 Broker 稱作 Kafka Cluster&lt;/li&gt;
&lt;li&gt;Kafka cluster 可以 zero downtime 擴展&lt;/li&gt;
&lt;li&gt;Clusters are used to manage the persistence and replication of message data.&lt;/li&gt;
&lt;li&gt;通常都會做 Cluster 以實現 Load Balancing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;ZooKeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理叢集配置&lt;/li&gt;
&lt;li&gt;負責管理及協調 Broker&lt;/li&gt;
&lt;li&gt;通知 Producer 及 Consumer
&lt;ul&gt;
&lt;li&gt;新的 Broker 出現&lt;/li&gt;
&lt;li&gt;Broker failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當 Zookeeper 發出通知，Consumer 及 Producer 根據通知決定要使用哪一個 Broker&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://zookeeper.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zookeeper.apache.org/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/apache_kafka/apache_kafka_introduction.htm&#34;&gt;https://www.tutorialspoint.com/apache_kafka/apache_kafka_introduction.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&#34;&gt;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&#34;&gt;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50227472/how-kafka-guarantees-zero-downtime-and-zero-data-loss&#34;&gt;https://stackoverflow.com/questions/50227472/how-kafka-guarantees-zero-downtime-and-zero-data-loss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloudurable.com/blog/kafka-architecture-topics/index.html&#34;&gt;http://cloudurable.com/blog/kafka-architecture-topics/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>macOS developer environments</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/setting-macos-env/</link>
      <pubDate>Sat, 28 Dec 2019 19:17:18 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/setting-macos-env/</guid>
      <description>&lt;h2 id=&#34;1-homebrew&#34;&gt;1. Homebrew&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 包管理器&lt;/li&gt;
&lt;li&gt;官網
&lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;包列表
&lt;a href=&#34;https://formulae.brew.sh/&#34;&gt;https://formulae.brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-iterm2&#34;&gt;2. iTerm2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相比內建的 Terminal，支援點選選取優化，選取即複製等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-gnu-stow&#34;&gt;3. GNU Stow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Symlink 管理器。&lt;/li&gt;
&lt;li&gt;用來將 dotfiles 用 symlink 連到 repo 裡面整包上傳 Github&lt;/li&gt;
&lt;li&gt;官網 &lt;a href=&#34;https://www.gnu.org/software/stow&#34;&gt;https://www.gnu.org/software/stow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-zsh&#34;&gt;3. zsh&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Z shell 支援 autosuggestion, autocompletion 及 syntax highlighting&lt;/li&gt;
&lt;li&gt;支援部分 bash, ksh 及 tcsh 語法&lt;/li&gt;
&lt;li&gt;zshrc 懶人包 &lt;a href=&#34;https://github.com/unixorn/zsh-quickstart-kit&#34;&gt;https://github.com/unixorn/zsh-quickstart-kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-vscode&#34;&gt;4. vscode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VSCODE 插件懶人包 &lt;a href=&#34;https://github.com/viatsko/awesome-vscode&#34;&gt;https://github.com/viatsko/awesome-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-vim&#34;&gt;5. vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vimrc 懶人包 &lt;a href=&#34;https://github.com/amix/vimrc&#34;&gt;https://github.com/amix/vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vim 插件管理器 Vundle &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;https://github.com/VundleVim/Vundle.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/27447370&#34;&gt;https://www.zhihu.com/question/27447370&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python 實作 Dictionary</title>
      <link>https://goatwu1993.github.io/blog/posts/datastructure/dict-python-implementation/</link>
      <pubDate>Thu, 26 Dec 2019 19:17:18 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/datastructure/dict-python-implementation/</guid>
      <description>&lt;h2 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h2&gt;
&lt;p&gt;Python Dictionary 的好用大家都知道，反過來，我覺得用 Python 實作一個 Dictionary 是個複習資料結構的好方法。&lt;/p&gt;
&lt;h2 id=&#34;瞄一下&#34;&gt;瞄一下&lt;/h2&gt;
&lt;p&gt;瞄一下
&lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpython&lt;/a&gt;
怎麼寫，
&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;這邊&lt;/a&gt;
有詳細解釋。&lt;/p&gt;
&lt;h2 id=&#34;hash-table-優點&#34;&gt;Hash table 優點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;O(1) insertion&lt;/li&gt;
&lt;li&gt;O(1) get&lt;/li&gt;
&lt;li&gt;O(1) delete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是要在 laod factor 在一定範圍內才能給出時間複雜度 O(1)的但書。&lt;/p&gt;
&lt;h2 id=&#34;load-factor--dynamic-resizing&#34;&gt;Load Factor &amp;amp; dynamic resizing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34;&gt;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$$Load Factor = n/k $$&lt;/p&gt;
&lt;p&gt;$$ k : bucket 數目，也叫 table size$$
$$ n : 資料筆數，k 通常略大於 n，留下(k-n)筆空白欄位。$$&lt;/p&gt;
&lt;p&gt;實務上控制 Load factor 介於 0.3 至 0.7 ，時間 O(1)的同時 k 還小。&lt;/p&gt;
&lt;h2 id=&#34;dictionary-node&#34;&gt;Dictionary Node&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class DictionaryNode():
    &amp;quot;&amp;quot;&amp;quot;
    Node of a DictionaryLinkedList.
    &amp;quot;&amp;quot;&amp;quot;

    def __init__(self, key, value, me_hash):
        self.key = key
        self.value = value
        self.me_hash = me_hash
        self.collided = False

    def __repr__(self):
        return (self.key.__repr__() + &amp;quot;: &amp;quot; + self.value.__repr__())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;me_hash&#34;&gt;me_hash&lt;/h3&gt;
&lt;p&gt;key 的 hash 值，cpython get 的時候比對會用到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;(ep-&amp;gt;me_key == key ||
(ep-&amp;gt;me_hash == hash &amp;amp;&amp;amp; unicode_eq(ep-&amp;gt;me_key, key)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細原因可能要對編碼比較熟才看得懂，我存著 resize 就不需要重算一次。&lt;/p&gt;
&lt;h3 id=&#34;collided&#34;&gt;collided&lt;/h3&gt;
&lt;p&gt;判斷是否 collide 過的 flag，若 delete 時 collided 為 True，告訴大家這 node 沒有值但需要往後尋找，若沒有 collide 過則代表沒有 collide 過，返回 indexError。&lt;/p&gt;
&lt;h2 id=&#34;dictionary-class&#34;&gt;Dictionary Class&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Dictionary():
    &amp;quot;&amp;quot;&amp;quot;
    Dictionary are implemented by HashTable
    Using open addressing method.
    Hash using siphash. I can not find siphash
    &amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.used_entry = 0
        self.buckets = [None for x in range(0, 8)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始大小為 8 ，python 沒有辦法 override {} 的讀取， KVP 只能慢慢塞。&lt;/p&gt;
&lt;p&gt;另外存取 used_entry 以免 len()需要跑 O(n)的 loop，insert/del 要記得 maintain。&lt;/p&gt;
&lt;h2 id=&#34;hash&#34;&gt;Hash&lt;/h2&gt;
&lt;p&gt;仿照 cpython 用 siphash，據作者所述是一個快速的 hash ，用過 md5 也是可以的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install siphash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from siphash import siphash24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dictionary-的-me_hash&#34;&gt;Dictionary 的 me_hash()&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def me_hash(self, key):
        &amp;quot;&amp;quot;&amp;quot;
        hash of key
        &amp;quot;&amp;quot;&amp;quot;
        return siphash24(b&#39;0123456789ABCDEF&#39;,(str(key).encode(&#39;utf-8&#39;))).hash()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dynamic-resizing&#34;&gt;Dynamic Resizing&lt;/h2&gt;
&lt;h3 id=&#34;bitmask--運算&#34;&gt;bitmask (&amp;amp;) 運算&lt;/h3&gt;
&lt;p&gt;當 k (table size) 是 2 的 m 次方，則 hash(n) mod k 可以用 hash(n) &amp;amp; bitmask 取代，其中 bitmask 為 m 個 1 組成。&lt;/p&gt;
&lt;h3 id=&#34;bitmask--in-python-terminal&#34;&gt;bitmask (&amp;amp;) in Python terminal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def hash(key): return siphash24(b&#39;0123456789ABCDEF&#39;,(str(key).encode(&#39;utf-8&#39;))).hash()
...
&amp;gt;&amp;gt;&amp;gt; n = &#39;key_string&#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # m = 3, k = 8
...
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b111 == hash(n) &amp;amp; 7
True
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b111 == hash(n) % 8
True
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # m = 4, k = 16
...
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b1111 == hash(n) &amp;amp; 15
True
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b1111 == hash(n) % 16
True
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;resizing-程式碼&#34;&gt;Resizing 程式碼&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def resize(self):
        &amp;quot;&amp;quot;&amp;quot;
        Should change the size if load_factor &amp;gt; 2/3 or load_factor &amp;lt; 2/3
        Should do nothing if load_factor between 1/3 and 2/3
        &amp;quot;&amp;quot;&amp;quot;
        def proper_size(n, k):
            pro_size = 8 if n &amp;lt;= 2 else 2**(int(n * 1.5)).bit_length()
            return pro_size

        used = self.used_entry
        old_size = len(self.buckets)
        new_size = proper_size(used, old_size)
        if old_size == new_size:
            return
        new_buckets = [None for x in range(0, new_size)]
        for i in range(old_size):
            if self.buckets[i] and (self.buckets[i].key is not None):
                key_me_hash = self.buckets[i].me_hash
                # &amp;amp; for bitwise operation (bitmask)
                entry = key_me_hash &amp;amp; (new_size-1)
                while new_buckets[entry]:
                    new_buckets[entry].collided = True
                    entry = entry+1 if entry &amp;lt; (new_size-2) else 0
                new_buckets[entry] = self.buckets[i]
                new_buckets[entry].collided = False
        self.buckets = new_buckets
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;magic-methods&#34;&gt;Magic Methods&lt;/h2&gt;
&lt;h3 id=&#34;實作-python-內建的-magic-methods&#34;&gt;實作 python 內建的 Magic Methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# __setitem__
a[b] = c
# __getitem__
a[b]
# __len__
len(a)
# __delitem__
del a[b]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-addressing&#34;&gt;Open Addressing&lt;/h3&gt;
&lt;p&gt;這裡用的是最簡單的 open addressing，entry 被佔據就找下一個，比較簡單，但容易有連續一整攤都被 occupied 的情形發生，如果有興趣可以實作其他的 open addressing 算法。&lt;/p&gt;
&lt;h3 id=&#34;magic-methods-程式碼&#34;&gt;Magic Methods 程式碼&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def __repr__(self):
        s = &#39;&#39;
        for i in range(len(self.buckets)):
            if self.buckets[i]:
                s = s + self.buckets[i].__repr__() + &#39;, &#39;
        return {} if not s else &amp;quot;{{{0}}}&amp;quot;.format(s[:-3])

    def __getitem__(self, key):
        key_me_hash = self.me_hash(key)
        l = len(self.buckets)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            if self.buckets[entry].key == key:
                return self.buckets[entry].value
            if not self.buckets[entry].collided:
                raise KeyError(key)
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        raise KeyError(key)

    def __setitem__(self, key, value):
        self.used_entry += 1
        self.resize()

        l = len(self.buckets)
        key_me_hash = self.me_hash(key)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            self.buckets[entry].collided = True
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        self.buckets[entry] = DictionaryNode(key=key,
                                             value=value,
                                             me_hash=key_me_hash)

    def __delitem__(self, key):
        key_me_hash = self.me_hash(key)
        l = len(self.buckets)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            if self.buckets[entry].key == key:
                self.buckets[entry].key = None
                self.buckets[entry].value = None
                self.buckets[entry].me_hash = None
                return
            if not self.buckets[entry].collided:
                raise KeyError(key)
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        raise KeyError(key)

    def __len__(self):
        counter = 0
        for i in range(len(self.buckets)):
            if self.buckets[i]:
                counter += 1
        return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整程式碼&#34;&gt;完整程式碼&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/goatwu1993/data_structure/blob/master/hash_table.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;Python 自己內建的資料結構，很多都是直接用 c 寫的，速度上快很多，如果沒必要，還是直接用就好了&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大神解說&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpython&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.csdn.net/yuan_j_y/article/details/9317817&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Magic Method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash - source &amp; export</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p5-source-export/</link>
      <pubDate>Mon, 20 Jan 2020 19:09:20 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p5-source-export/</guid>
      <description>&lt;h2 id=&#34;source&#34;&gt;source&lt;/h2&gt;
&lt;p&gt;使用 source 執行 shell script 會直接沿用目前的進程。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source hello-world.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;excute&#34;&gt;excute&lt;/h2&gt;
&lt;p&gt;直接執行 shell script 會開啟一個子進程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hello-world.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;export&#34;&gt;export&lt;/h2&gt;
&lt;p&gt;將某個變數變成環境變數，Life cycle 為這個進程結束為止&lt;/p&gt;
&lt;h2 id=&#34;diagram&#34;&gt;diagram&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
    subgraph Export Life cycle
        C1(parent process) -.-&amp;gt; |sleep| C2(parent process)
        C1 --&amp;gt; C3(export foo=FOO)
        C3 --&amp;gt; C4(echo $foo &amp;lt;br&amp;gt; FOO)
        C4 --&amp;gt; |export expire|C2
    end
    subgraph Execute
        A1(parent process) -.-&amp;gt; |sleep| A2(parent process)
        A1 --&amp;gt; |fork| A3(test1.sh)
        A3 --&amp;gt; A2
    end
    subgraph Source
        B1(parent process) -.-&amp;gt; B2(test1.sh)
        B2 -.-&amp;gt; B3(child process)
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it&#34;&gt;https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - test</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p4-test/</link>
      <pubDate>Mon, 20 Jan 2020 03:04:32 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p4-test/</guid>
      <description>&lt;h2 id=&#34;what-is-test&#34;&gt;What is test&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ man test
NAME
     test, [ -- condition evaluation utility

SYNOPSIS
     test expression
     [ expression ]

DESCRIPTION
     The test utility evaluates the expression and, if it evaluates to true, returns a zero (true) exit status; oth-
     erwise it returns 1 (false).  If there is no expression, test also returns 1 (false).

     All operators and flags are separate arguments to the test utility.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Condition 為真的話是返回 0，否則返回 1&lt;br&gt;
在 bash 可用以下方式呼叫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test expression&lt;/li&gt;
&lt;li&gt;[ expression ]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bash 裡面 &amp;ldquo;[&amp;rdquo; 就是 test&lt;/p&gt;
&lt;h2 id=&#34;測試給定的檔名檔案&#34;&gt;測試給定的檔名/檔案&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 判斷檔名是否存在(Exist)
test -e REAME.md
# 判斷檔名是否存在且為檔案
test -f REAME.md
# 判斷檔名是否存在且為資料夾
test -d dir
#
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;測試給定的兩個檔名檔案&#34;&gt;測試給定的兩個檔名/檔案&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Newer than
test file1 -nt file2
# Older than
test file1 -ot file2
# True if file1 and file2 exist and refer to the same file.
test file1 -ef file2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;還有許多其他的，但不常用到(block, Socket 等等)&lt;/p&gt;
&lt;h2 id=&#34;測試給定的字串&#34;&gt;測試給定的字串&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# True if string is not the null string
test string
# True if the length of string is zero.
test -z string
# True if the length of string is nonzero.
test -n string

# True if the strings s1 and s2 are identical.
test s1 = s2
# True if the strings s1 and s2 are not identical.
test s1 != s2
# True if string s1 comes before s2 based on the binary value of their characters.
test s1 &amp;lt; s2
# True if string s1 comes after s2 based on the binary value of their characters.
test s1 &amp;gt; s2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;測試給定的整數&#34;&gt;測試給定的整數&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# True if the integers n1 and n2 are algebraically equal.
test n1 -eq n2
# True if the integers n1 and n2 are not algebraically equal.
test n1 -ne n2
# True if the integer n1 is algebraically greater than the integer n2.
test n1 -gt n2
# True if the integer n1 is algebraically greater than or equal to the integer n2.
test n1 -ge n2
# True if the integer n1 is algebraically less than the integer n2.
test n1 -lt n2
# True if the integer n1 is algebraically less than or equal to the integer n2.
test n1 -le n2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;算子&#34;&gt;算子&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## not
! expression
## and
test expression1 -a expression2
## or
expression1 -o expression2
## ()
( expression )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and 優先於 or&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#test&#34;&gt;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - configs</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p3-configs/</link>
      <pubDate>Sun, 19 Jan 2020 22:12:33 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p3-configs/</guid>
      <description>&lt;h2 id=&#34;login-shell&#34;&gt;Login shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 su 切換使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;subshell&#34;&gt;Subshell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;etcprofile&#34;&gt;/etc/profile&lt;/h2&gt;
&lt;p&gt;全部的使用者的 login shell 都會讀取，包含 bash, zsh, etc.&lt;/p&gt;
&lt;h2 id=&#34;etcbash_profile&#34;&gt;/etc/bash_profile&lt;/h2&gt;
&lt;p&gt;全部使用者的 bash login shell 會讀取&lt;/p&gt;
&lt;!-- markdownlint-disable MD033 --&gt;
&lt;h2&gt; ~/.profile &lt;/h2&gt;  
&lt;!-- markdownlint-enable MD033 --&gt;
&lt;p&gt;個別使用者的 login shell 會讀取，包含 sh, bash, zsh&lt;/p&gt;
&lt;h2 id=&#34;bash_profile&#34;&gt;~/.bash_profile&lt;/h2&gt;
&lt;p&gt;個別使用者的 bash login shell 會讀取&lt;/p&gt;
&lt;h2 id=&#34;bashrc&#34;&gt;~/.bashrc&lt;/h2&gt;
&lt;p&gt;開啟 subshell 會讀取&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
    subgraph Login Shell
        subgraph System configs
        A(&amp;quot;/etc/profile&amp;quot;) --&amp;gt; B(&amp;quot;/etc/bash_profile&amp;quot;)
        end
        subgraph User configs
        B --&amp;gt; C(&amp;quot;~/.profile&amp;quot;)
        C --&amp;gt; D(&amp;quot;~/.bash_profile&amp;quot;)
        end
    end
    subgraph Subscreen
        D -.-&amp;gt; E(&amp;quot;~/.bashrc&amp;quot;)
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/261802/what-are-the-functional-differences-between-profile-bash-profile-and-bashrc&#34;&gt;https://serverfault.com/questions/261802/what-are-the-functional-differences-between-profile-bash-profile-and-bashrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - basic commands</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p1-basics/</link>
      <pubDate>Sun, 10 Jun 2018 17:20:14 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p1-basics/</guid>
      <description>&lt;h2 id=&#34;manual--help&#34;&gt;Manual &amp;amp; help&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# manual
man anything
info anything
anything --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-info&#34;&gt;System info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show shell name.
echo $SHELL
echo $0
# Show shell version.
$SHELL --version

# Clear terminal.
clear

# Show command history.
history

# Print working directory
pwd

# Show system info
uname -a

# uptime
uptime
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;file-managing&#34;&gt;File managing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List the files in working directory.
ls
# List all files, hidden file included, with detailed information.
ls -la
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show network interface config/info.
ifconfig

# get public ip
curl icanhazip.com

# Show network status
netstat
# Show all, include tcp/udp port.
netstat -an
# Show established connection
netstat -antu | grep &#39;ESTABLISHED&#39;
# Show kernel routing information
netstat -r
netstat -tulnp

# Check the bridge Interface
brtcl
brctl addbr &amp;lt;name&amp;gt;

# ssh
ssh
# Generate a new ssh-key. Usually used when attempt to ssh a address which has change device/remote host. Use this when encounter error message: WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!
ssh-keygen

# scp
scp
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cpu-memery-task--process&#34;&gt;CPU, memery, task &amp;amp; process&lt;/h2&gt;
&lt;h3 id=&#34;check-and-monitor-process&#34;&gt;Check and monitor process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List all process run by user shell
ps
# List all process, even by status
ps aux
# pstree
pstree

# Monitor the process status
top
# cpu
top -o cpu
# memery
top -o rsize

# List cronjob
crontab
# List all cronjob.
crontab -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sending-signal-or-kill-process&#34;&gt;Sending signal or kill process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Send a signal to a process
kill -signal PID
# Send 15 SIGTERM to a process
kill $pid

# killall allow you to kill app with name instead of pid
killall -9 $processname
# Ask before terminate
killall -i -9 $processname
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memory-usage&#34;&gt;Memory usage&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show recent memory usage
free -m
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekflare.com/netstat/&#34;&gt;https://geekflare.com/netstat/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&#34;&gt;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://goatwu1993.github.io/blog/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&#39;s 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt;
 feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache Hadoop</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-hadoop/hadoop/</link>
      <pubDate>Fri, 17 Jan 2020 17:04:13 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-hadoop/hadoop/</guid>
      <description>&lt;h2 id=&#34;what-is-hadoop&#34;&gt;What is Hadoop&lt;/h2&gt;
&lt;h3 id=&#34;hadoop&#34;&gt;Hadoop&lt;/h3&gt;
&lt;p&gt;Hadoop = HDFS + YARN + MapReduce&lt;/p&gt;
&lt;h3 id=&#34;hadoop-eco-system&#34;&gt;Hadoop eco-system&lt;/h3&gt;
&lt;p&gt;Spark, HBAse, Hive, Kafka, HDFS, etc&lt;/p&gt;
&lt;h2 id=&#34;referencce&#34;&gt;Referencce&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kknews.cc/zh-tw/code/rlyqae4.html&#34;&gt;https://kknews.cc/zh-tw/code/rlyqae4.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ML-Feature-Engineering</title>
      <link>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p4-feature-engineering/</link>
      <pubDate>Thu, 16 Jan 2020 20:24:05 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p4-feature-engineering/</guid>
      <description>&lt;h2 id=&#34;pca&#34;&gt;PCA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Primary Componenet Analysis&lt;/li&gt;
&lt;li&gt;無監督學習&lt;/li&gt;
&lt;li&gt;根據原始特徵數目 n，可以產生最多 n 個維度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lda&#34;&gt;LDA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear Discriminant analysis&lt;/li&gt;
&lt;li&gt;監督式學習&lt;/li&gt;
&lt;li&gt;根據原始分類數目 C，可以產生最多 C-1 個維度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparision&#34;&gt;Comparision&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;supervised / unsupervised&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;linear / non-linear&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Disk 2&lt;/th&gt;
&lt;th&gt;Disk 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PCA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;unsupervised&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;linear&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A3&lt;/td&gt;
&lt;td&gt;Ap(1-3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;LDA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;supervised&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Auto-Encoder&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;non-linear&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A6&lt;/td&gt;
&lt;td&gt;Ap(4-6)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B3&lt;/td&gt;
&lt;td&gt;Bp(1-3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B6&lt;/td&gt;
&lt;td&gt;Bp(4-6)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Ml P1</title>
      <link>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p1-basic/</link>
      <pubDate>Thu, 16 Jan 2020 20:20:15 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p1-basic/</guid>
      <description>&lt;h2 id=&#34;machine-learning-categories&#34;&gt;Machine Learning Categories&lt;/h2&gt;
&lt;h2 id=&#34;gathering-data&#34;&gt;Gathering Data&lt;/h2&gt;
&lt;h2 id=&#34;data-preparation&#34;&gt;Data preparation&lt;/h2&gt;
&lt;h3 id=&#34;data-preprocessing-資料預處理&#34;&gt;Data Preprocessing 資料預處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handling Missing Values&lt;/li&gt;
&lt;li&gt;Outlier&lt;/li&gt;
&lt;li&gt;Feature Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;model--hyperparameter-模型及超參數&#34;&gt;Model &amp;amp; HyperParameter 模型及超參數&lt;/h2&gt;
&lt;h2 id=&#34;loss-function-損失函數&#34;&gt;Loss Function 損失函數&lt;/h2&gt;
&lt;h2 id=&#34;activation-function-激活函數&#34;&gt;Activation Function 激活函數&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Gathering Data] --&amp;gt;B[Data preparation]
B --&amp;gt; C[Handling Missing Values]
B --&amp;gt; D[Handling Outlier]
C --&amp;gt; E[Feature Engineering]
D --&amp;gt; E
E --&amp;gt; F[Scaling]
E --&amp;gt; G[One-Hot Encodi  ng]
E --&amp;gt; H[box-cox]
E --&amp;gt; I[New Feature]
F --&amp;gt; J[Model]
G --&amp;gt; J
H --&amp;gt; J
I --&amp;gt; J
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git - submodule</title>
      <link>https://goatwu1993.github.io/blog/posts/git/git-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/git/git-commands/</guid>
      <description>&lt;h2 id=&#34;新增-submodule&#34;&gt;新增 submodule&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add git@github.com:xxx dir_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;移除-submodule&#34;&gt;移除 submodule&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rm --cached [欲移除的目錄]
rm -rf [欲移除的目錄]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-gitmodules&#34;&gt;修改 .gitmodules&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim .gitmodules
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-gitconfig&#34;&gt;修改 .git/config&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後再 commit，改變整個 Repository。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .gitmodules
git commit -m &amp;quot;Remove a submodule&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安全起見再做個-sync&#34;&gt;安全起見再做個 sync&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule sync
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;參考資料&#34;&gt;參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://biang.io/blog/development/tools/revision-control/git/submod&#34;&gt;https://biang.io/blog/development/tools/revision-control/git/submod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo commands</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</guid>
      <description>&lt;h2 id=&#34;hugo-使用&#34;&gt;Hugo 使用&lt;/h2&gt;
&lt;h3 id=&#34;安裝&#34;&gt;安裝&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第一次使用&#34;&gt;第一次使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;測試&#34;&gt;測試&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
cd quickstart
hugo
hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;p&gt;注意 content 寫完輸入 hugo 並不會自動刪除目標資料夾，手動刪除再跑一次 hugo 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./docs
hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新增文章&#34;&gt;新增文章&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;參考資料&#34;&gt;參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo 官網&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo commands</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</guid>
      <description>&lt;h2 id=&#34;設定-archetype&#34;&gt;設定 Archetype&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Archetype 是 hugo create content 的 default 檔案&lt;/li&gt;
&lt;li&gt;當選定好 theme 以後，通常 Archetype 都會長得差不多，建議先改一改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/archetypes/&#34;&gt;https://gohugo.io/content-management/archetypes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo themes</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-themes/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-themes/</guid>
      <description>&lt;p&gt;本篇記錄如何使用 hugo 線上的 themes&lt;/p&gt;
&lt;h2 id=&#34;更正&#34;&gt;更正&lt;/h2&gt;
&lt;p&gt;如果需要覆蓋 layouts 的話可以直接在根目錄下面建立一個 layouts 資料夾，裡面的內容會 override themes/name/layouts 底下的。&lt;/p&gt;
&lt;h2 id=&#34;hugo-themes&#34;&gt;Hugo themes&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo 官方線上 themes&lt;/a&gt;
&lt;/p&gt;
&lt;h3 id=&#34;a-直接-submodule&#34;&gt;a. 直接 submodule&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;不考慮更改 themes 的 partial/layout/css 的話，直接照抄就好&lt;/del&gt;
如果不太更動 theme 或是內容比較一般性的話，可以直接 clone。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# submodule
cd ./themes
git submodule add https://github.com/avianto/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;b-fork-再-submodule&#34;&gt;b. fork 再 submodule&lt;/h3&gt;
&lt;p&gt;如果需要更改一些比較客製化的版本的話請選擇 fork。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# fork
cd ./themes
git clone https://github.com/$你的Id/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-configtoml&#34;&gt;修改 config.toml&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;theme = &amp;quot;kiera&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>https://goatwu1993.github.io/blog/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://goatwu1993.github.io/blog/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt;
 | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;
: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&#39;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCP/IP cheatsheet</title>
      <link>https://goatwu1993.github.io/blog/posts/networking/osi-7-layres/</link>
      <pubDate>Fri, 11 May 2018 11:29:21 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/networking/osi-7-layres/</guid>
      <description>&lt;h2 id=&#34;osi-7-layres&#34;&gt;OSI 7 Layres&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer (Layer 7)
&lt;ul&gt;
&lt;li&gt;HTTP, HTTPS&lt;/li&gt;
&lt;li&gt;L7 firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Presentation Layer (Layer 6)&lt;/li&gt;
&lt;li&gt;Session Layer (Layer 5)
&lt;ul&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transport Layer (Layer 4)
&lt;ul&gt;
&lt;li&gt;TCP, UDP, SCTP, TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network Layer (Layer 3)
&lt;ul&gt;
&lt;li&gt;IP Address&lt;/li&gt;
&lt;li&gt;Router, Layer 3 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Link Layer (Layer 2)
&lt;ul&gt;
&lt;li&gt;Ethernet, 802.11(Wi-Fi), MAC Address&lt;/li&gt;
&lt;li&gt;Layer 2 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Physical Layer (Layer 1)
&lt;ul&gt;
&lt;li&gt;Hub, Wire, Fiber, Radio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip-protocols&#34;&gt;TCP/IP protocols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 80&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol Secure&lt;/li&gt;
&lt;li&gt;TCP Port 443&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTP
&lt;ul&gt;
&lt;li&gt;File Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 21&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Telnet
&lt;ul&gt;
&lt;li&gt;Telecommunication Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SMTP
&lt;ul&gt;
&lt;li&gt;Simple Mail Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP port 25&lt;/li&gt;
&lt;li&gt;For email&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS
&lt;ul&gt;
&lt;li&gt;Domain Name System&lt;/li&gt;
&lt;li&gt;UDP Port 53&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.lifewire.com/free-and-public-dns-servers-2626062&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Some famous public DNS servers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TFTP
&lt;ul&gt;
&lt;li&gt;Trivial File Transfer Protocol&lt;/li&gt;
&lt;li&gt;UDP port 69&lt;/li&gt;
&lt;li&gt;Not secure. Should only be used in private net.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RADIUS
&lt;ul&gt;
&lt;li&gt;Remote Authentication Dial-In User Service&lt;/li&gt;
&lt;li&gt;UDP Port : 1812 (authentication) &amp;amp; 1813(accounting)&lt;/li&gt;
&lt;li&gt;Code
&lt;ul&gt;
&lt;li&gt;Access-Request&lt;/li&gt;
&lt;li&gt;Access-Accept&lt;/li&gt;
&lt;li&gt;Access-Reject&lt;/li&gt;
&lt;li&gt;Access-Challenge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo/</link>
      <pubDate>Fri, 06 Apr 2018 19:19:34 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo/</guid>
      <description>&lt;h2 id=&#34;個人網頁怎麼建立&#34;&gt;個人網頁怎麼建立&lt;/h2&gt;
&lt;p&gt;大概可分為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己架站，例如 aws, vps, heroku&lt;/li&gt;
&lt;li&gt;靜態網頁，例如 github / google docs 等&lt;/li&gt;
&lt;li&gt;平台，例如 Wordpress, Medium, HackMD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;靜態網頁生成器static-site-generator&#34;&gt;靜態網頁生成器(static site generator)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;某些文件存放服務支援存放 html 可自動變成網站，如 github, google docs 等等。&lt;/li&gt;
&lt;li&gt;靜態網頁生成器，可以將文檔(通常是 Markdwon)，直接轉換成 html ，搭配支援靜態網頁的服務就是簡單的網站&lt;/li&gt;
&lt;li&gt;現在流行的靜態網頁生成器有 Jekyll, Hexo, Hugo&lt;/li&gt;
&lt;li&gt;注意：靜態網頁生成器要開啟留言功能是比較麻煩的，需要另外配合 disqus 或是 gitment。
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;最後選了 Hugo&lt;/p&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;很快&lt;/li&gt;
&lt;li&gt;很多 theme 可選&lt;/li&gt;
&lt;li&gt;可寫 Markdown&lt;/li&gt;
&lt;li&gt;支援 Syntax 高光&lt;/li&gt;
&lt;li&gt;可上傳 Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;各 theme 之間差異過大，沒辦法說換就換&lt;/li&gt;
&lt;li&gt;難上手&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不在意主題或是 Github 的話可以考慮 Hackmd。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://goatwu1993.github.io/blog/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://goatwu1993.github.io/blog/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://goatwu1993.github.io/blog/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://goatwu1993.github.io/blog/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
