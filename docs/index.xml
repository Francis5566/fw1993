<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>goatwu1993</title>
    <link>https://goatwu1993.github.io/blog/</link>
      <atom:link href="https://goatwu1993.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <description>goatwu1993</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>goatwu1993</title>
      <link>https://goatwu1993.github.io/blog/</link>
    </image>
    
    <item>
      <title>Docker commands</title>
      <link>https://goatwu1993.github.io/blog/posts/docker/docker-commands/</link>
      <pubDate>Wed, 15 Jan 2020 20:36:03 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/docker/docker-commands/</guid>
      <description>&lt;h2 id=&#34;container&#34;&gt;container&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;docker-compose&#34;&gt;docker-compose&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose ps
docker-compose ps -a

docker-compose down
docker-compose scale kafka=3
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SQL - basic commands</title>
      <link>https://goatwu1993.github.io/blog/posts/sql/bash-p1-basics/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/sql/bash-p1-basics/</guid>
      <description>&lt;h2 id=&#34;show-tables&#34;&gt;Show tables&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sqlite&amp;gt;.tables
users
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-info&#34;&gt;System info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show shell name.
echo $SHELL
echo $0
# Show shell version.
$SHELL --version

# Clear terminal.
clear

# Show command history.
history

# Print working directory
pwd

# Show system info
uname -a

# uptime
uptime
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;file-managing&#34;&gt;File managing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List the files in working directory.
ls
# List all files, hidden file included, with detailed information.
ls -la
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show network interface config/info.
ifconfig

# get public ip
curl icanhazip.com

# Show network status
netstat
# Show all, include tcp/udp port.
netstat -an
# Show established connection
netstat -antu | grep &#39;ESTABLISHED&#39;
# Show kernel routing information
netstat -r
netstat -tulnp

# Check the bridge Interface
brtcl
brctl addbr &amp;lt;name&amp;gt;

# ssh
ssh
# Generate a new ssh-key. Usually used when attempt to ssh a address which has change device/remote host. Use this when encounter error message: WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!
ssh-keygen

# scp
scp
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cpu-memery-task--process&#34;&gt;CPU, memery, task &amp;amp; process&lt;/h2&gt;
&lt;h3 id=&#34;check-and-monitor-process&#34;&gt;Check and monitor process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List all process run by user shell
ps
# List all process, even by status
ps aux
# pstree
pstree

# Monitor the process status
top
# cpu
top -o cpu
# memery
top -o rsize

# List cronjob
crontab
# List all cronjob.
crontab -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sending-signal-or-kill-process&#34;&gt;Sending signal or kill process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Send a signal to a process
kill -signal PID
# Send 15 SIGTERM to a process
kill $pid

# killall allow you to kill app with name instead of pid
killall -9 $processname
# Ask before terminate
killall -i -9 $processname
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memory-usage&#34;&gt;Memory usage&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show recent memory usage
free -m
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekflare.com/netstat/&#34;&gt;https://geekflare.com/netstat/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&#34;&gt;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SQL - basic commands</title>
      <link>https://goatwu1993.github.io/blog/posts/sql/bash-p1-basics/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/sql/bash-p1-basics/</guid>
      <description>&lt;h2 id=&#34;temporary-table&#34;&gt;Temporary Table&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Kafka mechanism</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p5-mechanism/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p5-mechanism/</guid>
      <description>&lt;h2 id=&#34;kafka-architecture&#34;&gt;Kafka Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Overview_of_Apache_Kafka.svg/1920px-Overview_of_Apache_Kafka.svg.png&#34; alt=&#34;Picture from wiki&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;producer&#34;&gt;Producer&lt;/h2&gt;
&lt;h3 id=&#34;producer-連接&#34;&gt;Producer 連接&lt;/h3&gt;
&lt;h3 id=&#34;producer-發送訊息時&#34;&gt;Producer 發送訊息時&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Zookeeper / bootstrap server&lt;/li&gt;
&lt;li&gt;Topics&lt;/li&gt;
&lt;li&gt;Key(可為 Null)&lt;/li&gt;
&lt;li&gt;Value(可為 Null)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;broker&#34;&gt;Broker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Topic 被分為多個 Partition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition 會有多個 Replica&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broker controller&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中一個 Broker 會被推選為 Controller&lt;/li&gt;
&lt;li&gt;負責偵測 Broker 級別的 Failure，幫忙所有受影響的 Partition 更換 Partition Leader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message&#34;&gt;Message&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 的訊息為鍵值對，使用鍵值對可以提供 Key -&amp;gt; Partition -&amp;gt; Offset 的查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topic&#34;&gt;Topic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Topic 為訊息的抽象分類&lt;/li&gt;
&lt;li&gt;Producers 發送訊息時，會指定一至多個 Topics。Consumers 訂閱一或多個 Topics&lt;/li&gt;
&lt;li&gt;Topics 分為 Regular Topics 及 Compacted topics&lt;/li&gt;
&lt;li&gt;Regular Topics 需要設定 retention time，超過則 Kafka 可刪除資料以釋出硬碟空間&lt;/li&gt;
&lt;li&gt;Compacted Topics 則訊息沒有有效期限，唯若 Key 重複，新訊息會覆蓋舊的訊息。Producer 可發送值為 null 的鍵值對以永久刪除該資料，稱作 tombstone message&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition&#34;&gt;Partition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;建立 Topic 時需要指定 Partitions 數目，之後只能增加不能減少&lt;/li&gt;
&lt;li&gt;Partition 是 Queue，訊息按 offset 嚴格排序，新訊息被 append 至尾端&lt;/li&gt;
&lt;li&gt;由於是磁碟的連續區域，因此效率很高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partition-offset&#34;&gt;Partition offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;訊息在 partition 裡面的 index，稱作 offset，為 Long 型態的整數&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;replica&#34;&gt;Replica&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Partition 產生 n 個副本，分散至各個 Broker 上，n 稱作 replication-factor&lt;/li&gt;
&lt;li&gt;成功同步的 Replica 稱作 
&lt;a href=&#34;#ISR&#34;&gt;ISR&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;partition-leader&#34;&gt;Partition Leader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Broker Controller 對每個 Partition 指定一個 Leader&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition Leader 負責接收資料，接收並寫入後，將資料 replicate 到全部 replica/partition follower&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-follower&#34;&gt;Partition Follower&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同一 Partition 的 non-leader replica&lt;/li&gt;
&lt;li&gt;概念上為只追隨某個 partition 的 Consumer，只 subscribe partition Leader，發現更新時 pull 到本地端&lt;/li&gt;
&lt;li&gt;當 Partition Leader 失效，Broker Controller 從 ISR 中選出新 Leader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;isr&#34;&gt;ISR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當 Leader 收到訊息時，所有 Follower 都需要寫入，已經更新至和 Leader 同步的 Followers 稱為 ISRs(in-sync replica)&lt;/li&gt;
&lt;li&gt;Record 只有在全部的 ISR 都同步時，才被視為成功 Commited&lt;/li&gt;
&lt;li&gt;Consumer 只能從已經 Commit 成功的 Record 讀取紀錄&lt;/li&gt;
&lt;li&gt;對於一個 Topic，只要各個 Partition 皆有一個 ISR 在線，則內容保持一致且服務不中斷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-cluster&#34;&gt;Kafka Cluster&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;n 個 Broker 組成 Cluster&lt;/li&gt;
&lt;li&gt;可以 zero downtime 擴展&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;ZooKeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理叢集配置&lt;/li&gt;
&lt;li&gt;負責管理及協調 Broker&lt;/li&gt;
&lt;li&gt;通知 Producer 及 Consumer
&lt;ul&gt;
&lt;li&gt;新的 Broker 出現&lt;/li&gt;
&lt;li&gt;Broker failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當 Zookeeper 發出通知，Consumer 及 Producer 根據通知決定要使用哪一個 Broker&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://zookeeper.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zookeeper.apache.org/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&#34;&gt;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&#34;&gt;https://medium.com/@poyu677/apache-kafka-簡易入門-db58898a3fab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloudurable.com/blog/kafka-architecture-topics/index.html&#34;&gt;http://cloudurable.com/blog/kafka-architecture-topics/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka with multi brokers</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p4-multibrokers/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p4-multibrokers/</guid>
      <description>&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# this will install java 1.8, zookeeper, and kafka
brew install kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;啟動-zookeeper&#34;&gt;啟動 zookeeper&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;開啟三個-brokers&#34;&gt;開啟三個 Brokers&lt;/h2&gt;
&lt;p&gt;分别修改 server1.properties, server2.properties&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;修改位置&lt;/th&gt;
&lt;th&gt;server.properties&lt;/th&gt;
&lt;th&gt;server1.properties&lt;/th&gt;
&lt;th&gt;server2.properties&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;broker.id&lt;/td&gt;
&lt;td&gt;broker.id=0&lt;/td&gt;
&lt;td&gt;broker.id=1&lt;/td&gt;
&lt;td&gt;broker.id=2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;listeners&lt;/td&gt;
&lt;td&gt;listeners=PLAINTEXT://:9092&lt;/td&gt;
&lt;td&gt;listeners=PLAINTEXT://:9093&lt;/td&gt;
&lt;td&gt;listeners=PLAINTEXT://:9094&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;log.dir&lt;/td&gt;
&lt;td&gt;log.dir=/usr/local/var/lib/kafka-logs-0&lt;/td&gt;
&lt;td&gt;log.dir=/usr/local/var/lib/kafka-logs-1&lt;/td&gt;
&lt;td&gt;log.dir=/usr/local/var/lib/kafka-logs-2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-server-start /usr/local/etc/kafka/server.properties &amp;amp;
kafka-server-start /usr/local/etc/kafka/server1.properties &amp;amp;
kafka-server-start /usr/local/etc/kafka/server2.properties &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;開啟一個兩個副本的-topic&#34;&gt;開啟一個兩個副本的 Topic&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-topics –create –zookeeper localhost:2181 –replication-factor 3 –partitions 1 –topic mytopic
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;consumer--producer-api&#34;&gt;Consumer &amp;amp; Producer API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shell script&lt;br&gt;
使用 brew kafka 提供的 shell script&lt;/li&gt;
&lt;li&gt;Python
&lt;ul&gt;
&lt;li&gt;pykafka&lt;/li&gt;
&lt;li&gt;kafka-python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scala
&lt;ul&gt;
&lt;li&gt;Scala-Shell&lt;/li&gt;
&lt;li&gt;Native-App&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell-script&#34;&gt;Shell Script&lt;/h2&gt;
&lt;p&gt;開啟兩個命令列&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/kafka-console-producer --broker-list localhost:9092 --topic test-kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic test-kafka --from-beginning
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;應該要能看到訊息傳送過去&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oumuv.github.io/2018/12/06/kafka-2/&#34;&gt;https://oumuv.github.io/2018/12/06/kafka-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.v123582.tw/2019/03/27/%E5%9C%A8-mac-%E4%B8%8A%E5%BB%BA%E7%AB%8B-Python-%E7%9A%84-Kafka-%E8%88%87-Spark-%E7%92%B0%E5%A2%83/&#34;&gt;https://blog.v123582.tw/2019/03/27/在-mac-上建立-Python-的-Kafka-與-Spark-環境/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka with single broker</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p3-singlebroker/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p3-singlebroker/</guid>
      <description>&lt;h2 id=&#34;install-kafka&#34;&gt;Install Kafka&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# this will install java 1.8, zookeeper, and kafka
brew install kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;檔案位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/usr/local/etc/kafka&lt;/li&gt;
&lt;li&gt;/usr/local/Cellar/kafka/$版號&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/local/Cellar/kafka/*
# 啟動zookeeper
./bin/zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties
# 啟動kafka
./bin/kafka-server-start /usr/local/etc/kafka/server.properties
# 建一個名為 test-kafka 的 Topic
./bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test-kafka

# 查看目前已經建立過的 Topic
./bin/kafka-topics --list --zookeeper localhost:2181\n\n
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;啟動-zookeeper--kafka&#34;&gt;啟動 zookeeper &amp;amp; kafka&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew services start zookeeper
brew services start kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;consumer--producer-api-選擇&#34;&gt;Consumer &amp;amp; Producer API 選擇&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Shell script&lt;br&gt;
使用 brew kafka 提供的 shell script&lt;/li&gt;
&lt;li&gt;Python
&lt;ul&gt;
&lt;li&gt;pykafka&lt;/li&gt;
&lt;li&gt;kafka-python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scala
&lt;ul&gt;
&lt;li&gt;Scala-Shell&lt;/li&gt;
&lt;li&gt;Native-App&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell-script&#34;&gt;Shell Script&lt;/h2&gt;
&lt;p&gt;開啟兩個命令列&lt;/p&gt;
&lt;p&gt;console1&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-console-producer --broker-list localhost:9092 --topic test-kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;console2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-console-consumer --bootstrap-server localhost:9092 --topic test-kafka --from-beginning
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;應該要能看到 console1 的輸入&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://oumuv.github.io/2018/12/06/kafka-2/&#34;&gt;https://oumuv.github.io/2018/12/06/kafka-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.v123582.tw/2019/03/27/%E5%9C%A8-mac-%E4%B8%8A%E5%BB%BA%E7%AB%8B-Python-%E7%9A%84-Kafka-%E8%88%87-Spark-%E7%92%B0%E5%A2%83/&#34;&gt;https://blog.v123582.tw/2019/03/27/在-mac-上建立-Python-的-Kafka-與-Spark-環境/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Some of Kafka terminology</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p2-terminology/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p2-terminology/</guid>
      <description>&lt;h2 id=&#34;kafka-architecture&#34;&gt;Kafka Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Overview_of_Apache_Kafka.svg/1920px-Overview_of_Apache_Kafka.svg.png&#34; alt=&#34;Picture from wiki&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;producers&#34;&gt;Producers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;負責將訊息 push 到 Kafka cluster，任何實作 Producer API 的 Client&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumers&#34;&gt;Consumers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從 Kafka cluster pull 訊息，任何實作 Consumer API 的 Client&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consumer group&lt;/strong&gt;: 多個 Consumer 可組成 Consumer group&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;brokers&#34;&gt;Brokers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Broker&lt;/strong&gt;: Kafka 的單一節點稱作 Broker&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kafka Cluster&lt;/strong&gt;: 多個 broker 組成 Kafka Cluster&lt;/li&gt;
&lt;li&gt;Broker 可以說是 Apache Kafka 的 Server 端，仲介處理 Client(Consumer 以及 Producer)的訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message&#34;&gt;Message&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 的訊息為鍵值對，提供 Topic + Key 對 Partition 的查詢&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;topic&#34;&gt;Topic&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Topic 為訊息的抽象分類&lt;/li&gt;
&lt;li&gt;Producers 發送訊息時指定 Topic&lt;/li&gt;
&lt;li&gt;Consumers 訂閱 Topic&lt;/li&gt;
&lt;li&gt;Topic 被分為多個 Partition&lt;/li&gt;
&lt;li&gt;Partition 會有多個 Replica&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partition&#34;&gt;Partition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建立 Topic 時需要指定 Partitions 數目，Topic 會被分為多個 Partition，Partition 數目之後只能增加不能減少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Partition offset&lt;/strong&gt;: 訊息在 partition 裡面的 index，稱作 offset，為 Long 型態的整數&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;replica&#34;&gt;Replica&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;replication-factor&lt;/strong&gt;: Partition 產生 n 個副本，分散至各個 Broker 上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ISR&lt;/strong&gt;: 成功同步的 Replica 稱作 ISR&lt;/li&gt;
&lt;li&gt;Replica 用於保證分散式系統的高可用&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;ZooKeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Apache 的另一個分散式專案，可管理系統配置&lt;/li&gt;
&lt;li&gt;負責 Kafka 的以下功能
&lt;ul&gt;
&lt;li&gt;儲存 metadata&lt;/li&gt;
&lt;li&gt;選舉 controller/leader&lt;/li&gt;
&lt;li&gt;Consumer group 發生變化時，進行 rebalance&lt;/li&gt;
&lt;li&gt;當 Producer 指定 ZK(而非 bootstrap server)，ZK 負責返回 broker list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Kafka Improvement Proposals 已經通過，將 Zookeeper 從 Kafka 移除，使用 bootstrap server/broker controller/共識來維護 Kafka ，&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&#34;&gt;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&#34;&gt;https://medium.com/@poyu677/apache-kafka-簡易入門-db58898a3fab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloudurable.com/blog/kafka-architecture-topics/index.html&#34;&gt;http://cloudurable.com/blog/kafka-architecture-topics/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitbook.cn/books/5ae1e77197c22f130e67ec4e/index.html&#34;&gt;https://gitbook.cn/books/5ae1e77197c22f130e67ec4e/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Kafka</title>
      <link>https://goatwu1993.github.io/blog/posts/note-elk/kafka-p1/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-elk/kafka-p1/</guid>
      <description>&lt;h2 id=&#34;what-is-elk&#34;&gt;What is ELK&lt;/h2&gt;
&lt;p&gt;ELK 是由 Elasticsearch, Logstash 及 Kibana 組成的堆疊
由於 Logstash 效能不佳，因此後面加入了 Beats，稱作 Elastic Stack
以上軟體皆由 Elastic NV 開發。&lt;/p&gt;
&lt;h2 id=&#34;what-is-elasticsearch&#34;&gt;What is Elasticsearch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 是個分散式，支援多租戶的全文搜尋引擎，他的搜尋引擎是基於 Apache Lucene 改寫。&lt;/li&gt;
&lt;li&gt;Elasticsearch 由 Java 編寫，目前由 Elastic NV 公司維護，核心原始碼為 Apache 2.0 開源，平台及周邊基於 Elastic License。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-features&#34;&gt;Elasticsearch Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分散式，可擴展&lt;/li&gt;
&lt;li&gt;多租戶&lt;/li&gt;
&lt;li&gt;RESTful，使用 JSON 和 Java API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-does-elasticsearch-works&#34;&gt;How does Elasticsearch works&lt;/h2&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/kafka-analysis-part-1&#34;&gt;https://www.infoq.cn/article/kafka-analysis-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/96826042&#34;&gt;https://zhuanlan.zhihu.com/p/96826042&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Elasticsearch&#34;&gt;https://zh.wikipedia.org/wiki/Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Kafka</title>
      <link>https://goatwu1993.github.io/blog/posts/note-elk/kafka-p1/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-elk/kafka-p1/</guid>
      <description>&lt;h2 id=&#34;what-is-elk&#34;&gt;What is ELK&lt;/h2&gt;
&lt;p&gt;ELK 是由 Elasticsearch, Logstash 及 Kibana 組成的堆疊
由於 Logstash 效能不佳，因此後面加入了 Beats，稱作 Elastic Stack
以上軟體皆由 Elastic NV 開發。&lt;/p&gt;
&lt;h2 id=&#34;what-is-elasticsearch&#34;&gt;What is Elasticsearch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 是個分散式，支援多租戶的全文搜尋引擎，他的搜尋引擎是基於 Apache Lucene 改寫。&lt;/li&gt;
&lt;li&gt;Elasticsearch 由 Java 編寫，目前由 Elastic NV 公司維護，核心原始碼為 Apache 2.0 開源，平台及周邊基於 Elastic License。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elasticsearch-features&#34;&gt;Elasticsearch Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分散式，可擴展&lt;/li&gt;
&lt;li&gt;多租戶&lt;/li&gt;
&lt;li&gt;RESTful，使用 JSON 和 Java API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-does-elasticsearch-works&#34;&gt;How does Elasticsearch works&lt;/h2&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/kafka-analysis-part-1&#34;&gt;https://www.infoq.cn/article/kafka-analysis-part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/96826042&#34;&gt;https://zhuanlan.zhihu.com/p/96826042&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/Elasticsearch&#34;&gt;https://zh.wikipedia.org/wiki/Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Kafka</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p1/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-p1/</guid>
      <description>&lt;p&gt;Kafka 是一個分散式的訊息處理平台(message processing platform)，仲介處理端到端的實時訊息傳輸。&lt;/p&gt;
&lt;h2 id=&#34;kafka-特點&#34;&gt;Kafka 特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分散式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以自由調整 C/A/P&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;減少網路封包的 Overhead&lt;/strong&gt;: 使用優化過的 binary TCP-based protocol，多條訊息會先寫入記憶體緩衝中存成 Batch 一同傳輸，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;輕量級可壓縮&lt;/strong&gt;: 避免對訊息的物件包覆，以&lt;strong&gt;檔案&lt;/strong&gt;的型式來處理資料&lt;/li&gt;
&lt;li&gt;使用 OS 的 page cache，不需要額外 Applicaion Cache ，爭取珍貴的記憶體空間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-優點&#34;&gt;Kafka 優點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Durability&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Fault Tolerance&lt;/li&gt;
&lt;li&gt;Zero downtime&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - source &amp; export</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p5-source-export/</link>
      <pubDate>Mon, 20 Jan 2020 19:09:20 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p5-source-export/</guid>
      <description>&lt;h2 id=&#34;source&#34;&gt;source&lt;/h2&gt;
&lt;p&gt;使用 source 執行 shell script 會直接沿用目前的進程。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source hello-world.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;excute&#34;&gt;excute&lt;/h2&gt;
&lt;p&gt;直接執行 shell script 會開啟一個子進程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./hello-world.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;export&#34;&gt;export&lt;/h2&gt;
&lt;p&gt;將某個變數變成環境變數，Life cycle 為這個進程結束為止&lt;/p&gt;
&lt;h2 id=&#34;diagram&#34;&gt;diagram&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
    subgraph Export Life cycle
        C1(parent process) -.-&amp;gt; |sleep| C2(parent process)
        C1 --&amp;gt; C3(export foo=FOO)
        C3 --&amp;gt; C4(echo $foo &amp;lt;br&amp;gt; FOO)
        C4 --&amp;gt; |export expire|C2
    end
    subgraph Execute
        A1(parent process) -.-&amp;gt; |sleep| A2(parent process)
        A1 --&amp;gt; |fork| A3(test1.sh)
        A3 --&amp;gt; A2
    end
    subgraph Source
        B1(parent process) -.-&amp;gt; B2(test1.sh)
        B2 -.-&amp;gt; B3(child process)
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it&#34;&gt;https://superuser.com/questions/176783/what-is-the-difference-between-executing-a-bash-script-vs-sourcing-it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - test</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p4-test/</link>
      <pubDate>Mon, 20 Jan 2020 03:04:32 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p4-test/</guid>
      <description>&lt;h2 id=&#34;what-is-test&#34;&gt;What is test&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ man test
NAME
     test, [ -- condition evaluation utility

SYNOPSIS
     test expression
     [ expression ]

DESCRIPTION
     The test utility evaluates the expression and, if it evaluates to true, returns a zero (true) exit status; oth-
     erwise it returns 1 (false).  If there is no expression, test also returns 1 (false).

     All operators and flags are separate arguments to the test utility.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Condition 為真的話是返回 0，否則返回 1&lt;br&gt;
在 bash 可用以下方式呼叫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test expression&lt;/li&gt;
&lt;li&gt;[ expression ]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bash 裡面 &amp;ldquo;[&amp;rdquo; 就是 test&lt;/p&gt;
&lt;h2 id=&#34;測試給定的檔名檔案&#34;&gt;測試給定的檔名/檔案&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 判斷檔名是否存在(Exist)
test -e REAME.md
# 判斷檔名是否存在且為檔案
test -f REAME.md
# 判斷檔名是否存在且為資料夾
test -d dir
#
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;測試給定的兩個檔名檔案&#34;&gt;測試給定的兩個檔名/檔案&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Newer than
test file1 -nt file2
# Older than
test file1 -ot file2
# True if file1 and file2 exist and refer to the same file.
test file1 -ef file2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;還有許多其他的，但不常用到(block, Socket 等等)&lt;/p&gt;
&lt;h2 id=&#34;測試給定的字串&#34;&gt;測試給定的字串&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# True if string is not the null string
test string
# True if the length of string is zero.
test -z string
# True if the length of string is nonzero.
test -n string

# True if the strings s1 and s2 are identical.
test s1 = s2
# True if the strings s1 and s2 are not identical.
test s1 != s2
# True if string s1 comes before s2 based on the binary value of their characters.
test s1 &amp;lt; s2
# True if string s1 comes after s2 based on the binary value of their characters.
test s1 &amp;gt; s2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;測試給定的整數&#34;&gt;測試給定的整數&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# True if the integers n1 and n2 are algebraically equal.
test n1 -eq n2
# True if the integers n1 and n2 are not algebraically equal.
test n1 -ne n2
# True if the integer n1 is algebraically greater than the integer n2.
test n1 -gt n2
# True if the integer n1 is algebraically greater than or equal to the integer n2.
test n1 -ge n2
# True if the integer n1 is algebraically less than the integer n2.
test n1 -lt n2
# True if the integer n1 is algebraically less than or equal to the integer n2.
test n1 -le n2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;算子&#34;&gt;算子&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## not
! expression
## and
test expression1 -a expression2
## or
expression1 -o expression2
## ()
( expression )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and 優先於 or&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#test&#34;&gt;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bash - configs</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p3-configs/</link>
      <pubDate>Sun, 19 Jan 2020 22:12:33 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p3-configs/</guid>
      <description>&lt;h2 id=&#34;login-shell&#34;&gt;Login shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 su 切換使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;subshell&#34;&gt;Subshell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;etcprofile&#34;&gt;/etc/profile&lt;/h2&gt;
&lt;p&gt;全部的使用者的 login shell 都會讀取，包含 bash, zsh, etc.&lt;/p&gt;
&lt;h2 id=&#34;etcbash_profile&#34;&gt;/etc/bash_profile&lt;/h2&gt;
&lt;p&gt;全部使用者的 bash login shell 會讀取&lt;/p&gt;
&lt;!-- markdownlint-disable MD033 --&gt;
&lt;h2&gt; ~/.profile &lt;/h2&gt;  
&lt;!-- markdownlint-enable MD033 --&gt;
&lt;p&gt;個別使用者的 login shell 會讀取，包含 sh, bash, zsh&lt;/p&gt;
&lt;h2 id=&#34;bash_profile&#34;&gt;~/.bash_profile&lt;/h2&gt;
&lt;p&gt;個別使用者的 bash login shell 會讀取&lt;/p&gt;
&lt;h2 id=&#34;bashrc&#34;&gt;~/.bashrc&lt;/h2&gt;
&lt;p&gt;開啟 subshell 會讀取&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
    subgraph Login Shell
        subgraph System configs
        A(&amp;quot;/etc/profile&amp;quot;) --&amp;gt; B(&amp;quot;/etc/bash_profile&amp;quot;)
        end
        subgraph User configs
        B --&amp;gt; C(&amp;quot;~/.profile&amp;quot;)
        C --&amp;gt; D(&amp;quot;~/.bash_profile&amp;quot;)
        end
    end
    subgraph Subscreen
        D -.-&amp;gt; E(&amp;quot;~/.bashrc&amp;quot;)
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/261802/what-are-the-functional-differences-between-profile-bash-profile-and-bashrc&#34;&gt;https://serverfault.com/questions/261802/what-are-the-functional-differences-between-profile-bash-profile-and-bashrc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache Spark Setup</title>
      <link>https://goatwu1993.github.io/blog/posts/note-spark/spark-p2-setup/</link>
      <pubDate>Fri, 17 Jan 2020 20:33:38 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-spark/spark-p2-setup/</guid>
      <description>&lt;h2 id=&#34;spark-installation&#34;&gt;Spark Installation&lt;/h2&gt;
&lt;h2 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;macOS
&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;xcode-select&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Apache Spark&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;test&#34;&gt;Test&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ spark-shell
...
...
...
scala&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ithelp.ithome.com.tw/users/20103839/ironman/1210&#34;&gt;https://ithelp.ithome.com.tw/users/20103839/ironman/1210&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://intellipaat.com/blog/tutorial/spark-tutorial/downloading-spark-and-getting-started/&#34;&gt;https://intellipaat.com/blog/tutorial/spark-tutorial/downloading-spark-and-getting-started/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What is Apache Spark</title>
      <link>https://goatwu1993.github.io/blog/posts/note-spark/spark-p1-whatis/</link>
      <pubDate>Fri, 17 Jan 2020 17:04:13 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-spark/spark-p1-whatis/</guid>
      <description>&lt;h2 id=&#34;what-is-spark&#34;&gt;What is Spark&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spark 是一個開源叢集式運算，用來替代 Hadoop Map Reduce 的部分功能&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
Spark(Spark) --&amp;gt; Core(Spark Core)
Spark --&amp;gt; D(Spark SQL)
Spark --&amp;gt; E(Spark Streaming)
Spark --&amp;gt; F(MLlib)
Spark --&amp;gt; G(GraphX)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;spark-特點&#34;&gt;Spark 特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spark 允許用戶將資料載入至叢集記憶體，並多次對其進行查詢，非常適合用於機器學習演算法&lt;/li&gt;
&lt;li&gt;提供 Java, Scala, Python 及 R 語言 API&lt;/li&gt;
&lt;li&gt;記憶體內的快取資料集，可進行互動式資料分析(相對於 Hadoop MapReduce)&lt;/li&gt;
&lt;li&gt;Scala 或 Python 中的互動式命令列介面可降低橫向擴展資料探索的反應時間。&lt;/li&gt;
&lt;li&gt;Spark Streaming 對即時資料串流的處理具有可擴充性、高吞吐量、可容錯性等特點。&lt;/li&gt;
&lt;li&gt;Spark SQL 支援結構化和關聯式查詢處理（SQL）。&lt;/li&gt;
&lt;li&gt;MLlib 機器學習演算法和 Graphx 圖形處理演算法的高階函式庫。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-特點-1&#34;&gt;Spark 特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Memory Storage&lt;/li&gt;
&lt;li&gt;Immutability&lt;br&gt;
通過 Spark Core RDD 的概念來儲存數據，RDD 被創建之後沒有辦法修改，Transfromation 只會產生一個新的 RDD&lt;/li&gt;
&lt;li&gt;Lazy Evaluation&lt;br&gt;
數值直到 Action 才會被計算出來&lt;/li&gt;
&lt;li&gt;Partitioning&lt;br&gt;
計算會被指派到 RDD Partition，Partition 的數目直接關係到平行運算的程度。&lt;/li&gt;
&lt;li&gt;支援容錯機制&lt;br&gt;
紀錄各個 RDD 的產生過程(稱為 RDD Lineage)，當節點失效時可從 Parent RDD 重新推算失效節點的 Partition。&lt;/li&gt;
&lt;li&gt;容錯機制最佳化
Transfromation 函數分為寬依賴及窄依賴，窄依賴的情況下可直接用 Partition 推算 Child Partition，不需整組 RDD 從新推算。&lt;/li&gt;
&lt;li&gt;Persistence
可以根據資料是否會重新使用，指定存放在記憶體或磁碟。&lt;/li&gt;
&lt;li&gt;No Limitation&lt;br&gt;
RDD 的數目只需要考量記憶體以及硬碟，沒有確切數目上限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spark-core&#34;&gt;Spark Core&lt;/h2&gt;
&lt;p&gt;Spark Core 是整個專案的基礎，提供了分散式任務調度、排程及基本的 I/O，其基礎的程式抽象被稱為 Resilient Distributed Dataset (RDD)&lt;/p&gt;
&lt;h2 id=&#34;spark-sql&#34;&gt;Spark SQL&lt;/h2&gt;
&lt;p&gt;Spark SQL 在 Spark 核心上帶出一種名為 SchemaRDD 的資料抽象化概念，提供結構化和半結構化資料相關的支援。Spark SQL 提供了領域特定語言，可使用 Scala、Java 或 Python 來操縱 SchemaRDDs。它還支援使用使用命令行介面和 ODBC／JDBC 伺服器操作 SQL 語言。在 Spark 1.3 版本，SchemaRDD 被重新命名為 DataFrame。&lt;/p&gt;
&lt;h2 id=&#34;spark-streaming&#34;&gt;Spark Streaming&lt;/h2&gt;
&lt;p&gt;Spark Streaming 充分利用 Spark 核心的快速排程能力來執行串流分析。它擷取小批次的資料並對之執行 RDD 轉換。這種設計使串流分析可在同一個引擎內使用同一組為批次分析編寫而撰寫的應用程式碼。&lt;/p&gt;
&lt;h2 id=&#34;mllib&#34;&gt;MLlib&lt;/h2&gt;
&lt;p&gt;MLlib 是 Spark 上分散式機器學習框架。Spark 分散式記憶體式的架構比 Hadoop 磁碟式的 Apache Mahout 快上 10 倍，擴充性甚至比 Vowpal Wabbit 要好。MLlib 可使用許多常見的機器學習和統計演算法，簡化大規模機器學習時間&lt;/p&gt;
&lt;h2 id=&#34;graphx&#34;&gt;GraphX&lt;/h2&gt;
&lt;p&gt;GraphX 是 Spark 上的分散式圖形處理框架。它提供了一組 API，可用於表達圖表計算並可以類比 Pregel 抽象化。GraphX 還對這種抽象化提供了最佳化運行。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-tw/Apache_Spark&#34;&gt;https://zh.wikipedia.org/zh-tw/Apache_Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-advantages-of-RDD&#34;&gt;https://www.quora.com/What-are-the-advantages-of-RDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/405603/&#34;&gt;https://codertw.com/程式語言/405603/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linux filesystem</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/linux-p1-filesystem/</link>
      <pubDate>Sat, 28 Dec 2019 19:17:18 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/linux-p1-filesystem/</guid>
      <description>&lt;h2 id=&#34;bin&#34;&gt;/bin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;系統基礎的 Binary 檔案&lt;/li&gt;
&lt;li&gt;例如： ls, mv, rm, mkdir, rmdir 常用的執行檔&lt;/li&gt;
&lt;li&gt;內容和/usr/bin 基本相同，有時候會使用連結檔&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dev&#34;&gt;/dev&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;裝置相關的檔案或特殊的檔案&lt;/li&gt;
&lt;li&gt;Unix 或 Linux 系統均把裝置當成是一個檔案來看待&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;etc&#34;&gt;/etc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;/etc 存放各種 Host/系統 設定檔&lt;/li&gt;
&lt;li&gt;裡面的檔案是 static 的&lt;/li&gt;
&lt;li&gt;不得存放 binary&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;etcinitd&#34;&gt;/etc/init.d&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;啟動腳本以及服務腳本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;etcrcd&#34;&gt;/etc/rc.d&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;記錄一些開關機過程中的 scripts 檔案， scripts 有點像是 DOS 下的批次檔&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;etcopt&#34;&gt;/etc/opt&lt;/h3&gt;
&lt;h2 id=&#34;root&#34;&gt;/root&lt;/h2&gt;
&lt;p&gt;系統管理員的目錄&lt;/p&gt;
&lt;h2 id=&#34;sbin&#34;&gt;/sbin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;System Binaries 及執行檔&lt;/li&gt;
&lt;li&gt;/sbin/shutdow，關機指令&lt;/li&gt;
&lt;li&gt;/sbin/fastboot&lt;/li&gt;
&lt;li&gt;/sbin/reboot&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tmp&#34;&gt;/tmp&lt;/h2&gt;
&lt;h2 id=&#34;usr&#34;&gt;/usr&lt;/h2&gt;
&lt;h3 id=&#34;usrbin&#34;&gt;/usr/bin&lt;/h3&gt;
&lt;h3 id=&#34;usrlocal&#34;&gt;/usr/local&lt;/h3&gt;
&lt;h3 id=&#34;usrlocalbin&#34;&gt;/usr/local/bin&lt;/h3&gt;
&lt;h2 id=&#34;var&#34;&gt;/var&lt;/h2&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.vbird.org/linux_basic/redhat6.1/linux_05file.php&#34;&gt;https://linux.vbird.org/linux_basic/redhat6.1/linux_05file.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/4186/what-is-usr-local-bin&#34;&gt;https://unix.stackexchange.com/questions/4186/what-is-usr-local-bin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pathname.com/fhs/&#34;&gt;http://www.pathname.com/fhs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>macOS good tool</title>
      <link>https://goatwu1993.github.io/blog/posts/macos/linux-p1-filesystem/</link>
      <pubDate>Sat, 28 Dec 2019 19:17:18 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/macos/linux-p1-filesystem/</guid>
      <description>&lt;h2 id=&#34;1-homebrew&#34;&gt;1. Homebrew&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 包管理器&lt;/li&gt;
&lt;li&gt;官網
&lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;包列表
&lt;a href=&#34;https://formulae.brew.sh/&#34;&gt;https://formulae.brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-iterm2&#34;&gt;2. iTerm2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相比內建的 Terminal，支援點選選取優化，選取即複製等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-gnu-stow&#34;&gt;3. GNU Stow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Symlink 管理器。&lt;/li&gt;
&lt;li&gt;用來將 dotfiles 用 symlink 連到 repo 裡面整包上傳 Github&lt;/li&gt;
&lt;li&gt;官網 &lt;a href=&#34;https://www.gnu.org/software/stow&#34;&gt;https://www.gnu.org/software/stow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-zsh&#34;&gt;3. zsh&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Z shell 支援 autosuggestion, autocompletion 及 syntax highlighting&lt;/li&gt;
&lt;li&gt;支援部分 bash, ksh 及 tcsh 語法&lt;/li&gt;
&lt;li&gt;zshrc 懶人包 &lt;a href=&#34;https://github.com/unixorn/zsh-quickstart-kit&#34;&gt;https://github.com/unixorn/zsh-quickstart-kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-vscode&#34;&gt;4. vscode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VSCODE 插件懶人包 &lt;a href=&#34;https://github.com/viatsko/awesome-vscode&#34;&gt;https://github.com/viatsko/awesome-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-vim&#34;&gt;5. vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vimrc 懶人包 &lt;a href=&#34;https://github.com/amix/vimrc&#34;&gt;https://github.com/amix/vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vim 插件管理器 Vundle &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;https://github.com/VundleVim/Vundle.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/27447370&#34;&gt;https://www.zhihu.com/question/27447370&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python 實作 Dictionary</title>
      <link>https://goatwu1993.github.io/blog/posts/datastructure/dict-python-implementation/</link>
      <pubDate>Thu, 26 Dec 2019 19:17:18 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/datastructure/dict-python-implementation/</guid>
      <description>&lt;h2 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h2&gt;
&lt;p&gt;Python Dictionary 的好用大家都知道，反過來，我覺得用 Python 實作一個 Dictionary 是個複習資料結構的好方法。&lt;/p&gt;
&lt;h2 id=&#34;瞄一下&#34;&gt;瞄一下&lt;/h2&gt;
&lt;p&gt;瞄一下
&lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpython&lt;/a&gt;
怎麼寫，
&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;這邊&lt;/a&gt;
有詳細解釋。&lt;/p&gt;
&lt;h2 id=&#34;hash-table-優點&#34;&gt;Hash table 優點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;O(1) insertion&lt;/li&gt;
&lt;li&gt;O(1) get&lt;/li&gt;
&lt;li&gt;O(1) delete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是要在 laod factor 在一定範圍內才能給出時間複雜度 O(1)的但書。&lt;/p&gt;
&lt;h2 id=&#34;load-factor--dynamic-resizing&#34;&gt;Load Factor &amp;amp; dynamic resizing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34;&gt;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$$Load Factor = n/k $$&lt;/p&gt;
&lt;p&gt;$$ k : bucket 數目，也叫 table size$$
$$ n : 資料筆數，k 通常略大於 n，留下(k-n)筆空白欄位。$$&lt;/p&gt;
&lt;p&gt;實務上控制 Load factor 介於 0.3 至 0.7 ，時間 O(1)的同時 k 還小。&lt;/p&gt;
&lt;h2 id=&#34;dictionary-node&#34;&gt;Dictionary Node&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class DictionaryNode():
    &amp;quot;&amp;quot;&amp;quot;
    Node of a DictionaryLinkedList.
    &amp;quot;&amp;quot;&amp;quot;

    def __init__(self, key, value, me_hash):
        self.key = key
        self.value = value
        self.me_hash = me_hash
        self.collided = False

    def __repr__(self):
        return (self.key.__repr__() + &amp;quot;: &amp;quot; + self.value.__repr__())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;me_hash&#34;&gt;me_hash&lt;/h3&gt;
&lt;p&gt;key 的 hash 值，cpython get 的時候比對會用到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;(ep-&amp;gt;me_key == key ||
(ep-&amp;gt;me_hash == hash &amp;amp;&amp;amp; unicode_eq(ep-&amp;gt;me_key, key)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;詳細原因可能要對編碼比較熟才看得懂，我存著 resize 就不需要重算一次。&lt;/p&gt;
&lt;h3 id=&#34;collided&#34;&gt;collided&lt;/h3&gt;
&lt;p&gt;判斷是否 collide 過的 flag，若 delete 時 collided 為 True，告訴大家這 node 沒有值但需要往後尋找，若沒有 collide 過則代表沒有 collide 過，返回 indexError。&lt;/p&gt;
&lt;h2 id=&#34;dictionary-class&#34;&gt;Dictionary Class&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Dictionary():
    &amp;quot;&amp;quot;&amp;quot;
    Dictionary are implemented by HashTable
    Using open addressing method.
    Hash using siphash. I can not find siphash
    &amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.used_entry = 0
        self.buckets = [None for x in range(0, 8)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始大小為 8 ，python 沒有辦法 override {} 的讀取， KVP 只能慢慢塞。&lt;/p&gt;
&lt;p&gt;另外存取 used_entry 以免 len()需要跑 O(n)的 loop，insert/del 要記得 maintain。&lt;/p&gt;
&lt;h2 id=&#34;hash&#34;&gt;Hash&lt;/h2&gt;
&lt;p&gt;仿照 cpython 用 siphash，據作者所述是一個快速的 hash ，用過 md5 也是可以的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install siphash
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from siphash import siphash24
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dictionary-的-me_hash&#34;&gt;Dictionary 的 me_hash()&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def me_hash(self, key):
        &amp;quot;&amp;quot;&amp;quot;
        hash of key
        &amp;quot;&amp;quot;&amp;quot;
        return siphash24(b&#39;0123456789ABCDEF&#39;,(str(key).encode(&#39;utf-8&#39;))).hash()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dynamic-resizing&#34;&gt;Dynamic Resizing&lt;/h2&gt;
&lt;h3 id=&#34;bitmask--運算&#34;&gt;bitmask (&amp;amp;) 運算&lt;/h3&gt;
&lt;p&gt;當 k (table size) 是 2 的 m 次方，則 hash(n) mod k 可以用 hash(n) &amp;amp; bitmask 取代，其中 bitmask 為 m 個 1 組成。&lt;/p&gt;
&lt;h3 id=&#34;bitmask--in-python-terminal&#34;&gt;bitmask (&amp;amp;) in Python terminal&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def hash(key): return siphash24(b&#39;0123456789ABCDEF&#39;,(str(key).encode(&#39;utf-8&#39;))).hash()
...
&amp;gt;&amp;gt;&amp;gt; n = &#39;key_string&#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # m = 3, k = 8
...
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b111 == hash(n) &amp;amp; 7
True
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b111 == hash(n) % 8
True
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # m = 4, k = 16
...
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b1111 == hash(n) &amp;amp; 15
True
&amp;gt;&amp;gt;&amp;gt; hash(n) &amp;amp; 0b1111 == hash(n) % 16
True
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;resizing-程式碼&#34;&gt;Resizing 程式碼&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def resize(self):
        &amp;quot;&amp;quot;&amp;quot;
        Should change the size if load_factor &amp;gt; 2/3 or load_factor &amp;lt; 2/3
        Should do nothing if load_factor between 1/3 and 2/3
        &amp;quot;&amp;quot;&amp;quot;
        def proper_size(n, k):
            pro_size = 8 if n &amp;lt;= 2 else 2**(int(n * 1.5)).bit_length()
            return pro_size

        used = self.used_entry
        old_size = len(self.buckets)
        new_size = proper_size(used, old_size)
        if old_size == new_size:
            return
        new_buckets = [None for x in range(0, new_size)]
        for i in range(old_size):
            if self.buckets[i] and (self.buckets[i].key is not None):
                key_me_hash = self.buckets[i].me_hash
                # &amp;amp; for bitwise operation (bitmask)
                entry = key_me_hash &amp;amp; (new_size-1)
                while new_buckets[entry]:
                    new_buckets[entry].collided = True
                    entry = entry+1 if entry &amp;lt; (new_size-2) else 0
                new_buckets[entry] = self.buckets[i]
                new_buckets[entry].collided = False
        self.buckets = new_buckets
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;magic-methods&#34;&gt;Magic Methods&lt;/h2&gt;
&lt;h3 id=&#34;實作-python-內建的-magic-methods&#34;&gt;實作 python 內建的 Magic Methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# __setitem__
a[b] = c
# __getitem__
a[b]
# __len__
len(a)
# __delitem__
del a[b]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-addressing&#34;&gt;Open Addressing&lt;/h3&gt;
&lt;p&gt;這裡用的是最簡單的 open addressing，entry 被佔據就找下一個，比較簡單，但容易有連續一整攤都被 occupied 的情形發生，如果有興趣可以實作其他的 open addressing 算法。&lt;/p&gt;
&lt;h3 id=&#34;magic-methods-程式碼&#34;&gt;Magic Methods 程式碼&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def __repr__(self):
        s = &#39;&#39;
        for i in range(len(self.buckets)):
            if self.buckets[i]:
                s = s + self.buckets[i].__repr__() + &#39;, &#39;
        return {} if not s else &amp;quot;{{{0}}}&amp;quot;.format(s[:-3])

    def __getitem__(self, key):
        key_me_hash = self.me_hash(key)
        l = len(self.buckets)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            if self.buckets[entry].key == key:
                return self.buckets[entry].value
            if not self.buckets[entry].collided:
                raise KeyError(key)
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        raise KeyError(key)

    def __setitem__(self, key, value):
        self.used_entry += 1
        self.resize()

        l = len(self.buckets)
        key_me_hash = self.me_hash(key)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            self.buckets[entry].collided = True
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        self.buckets[entry] = DictionaryNode(key=key,
                                             value=value,
                                             me_hash=key_me_hash)

    def __delitem__(self, key):
        key_me_hash = self.me_hash(key)
        l = len(self.buckets)
        entry = key_me_hash &amp;amp; (l-1)
        while self.buckets[entry]:
            if self.buckets[entry].key == key:
                self.buckets[entry].key = None
                self.buckets[entry].value = None
                self.buckets[entry].me_hash = None
                return
            if not self.buckets[entry].collided:
                raise KeyError(key)
            entry = entry+1 if entry &amp;lt; (l-2) else 0
        raise KeyError(key)

    def __len__(self):
        counter = 0
        for i in range(len(self.buckets)):
            if self.buckets[i]:
                counter += 1
        return counter
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整程式碼&#34;&gt;完整程式碼&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/goatwu1993/data_structure/blob/master/hash_table.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;Python 自己內建的資料結構，很多都是直接用 c 寫的，速度上快很多，如果沒必要，還是直接用就好了&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大神解說&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cpython&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://blog.csdn.net/yuan_j_y/article/details/9317817&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Magic Method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bash - basic commands</title>
      <link>https://goatwu1993.github.io/blog/posts/basics/bash-p1-basics/</link>
      <pubDate>Sun, 10 Jun 2018 17:20:14 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/basics/bash-p1-basics/</guid>
      <description>&lt;h2 id=&#34;manual--help&#34;&gt;Manual &amp;amp; help&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# manual
man anything
info anything
anything --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;system-info&#34;&gt;System info&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show shell name.
echo $SHELL
echo $0
# Show shell version.
$SHELL --version

# Clear terminal.
clear

# Show command history.
history

# Print working directory
pwd

# Show system info
uname -a

# uptime
uptime
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;file-managing&#34;&gt;File managing&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List the files in working directory.
ls
# List all files, hidden file included, with detailed information.
ls -la
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show network interface config/info.
ifconfig

# get public ip
curl icanhazip.com

# Show network status
netstat
# Show all, include tcp/udp port.
netstat -an
# Show established connection
netstat -antu | grep &#39;ESTABLISHED&#39;
# Show kernel routing information
netstat -r
netstat -tulnp

# Check the bridge Interface
brtcl
brctl addbr &amp;lt;name&amp;gt;

# ssh
ssh
# Generate a new ssh-key. Usually used when attempt to ssh a address which has change device/remote host. Use this when encounter error message: WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!
ssh-keygen

# scp
scp
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cpu-memery-task--process&#34;&gt;CPU, memery, task &amp;amp; process&lt;/h2&gt;
&lt;h3 id=&#34;check-and-monitor-process&#34;&gt;Check and monitor process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# List all process run by user shell
ps
# List all process, even by status
ps aux
# pstree
pstree

# Monitor the process status
top
# cpu
top -o cpu
# memery
top -o rsize

# List cronjob
crontab
# List all cronjob.
crontab -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sending-signal-or-kill-process&#34;&gt;Sending signal or kill process&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Send a signal to a process
kill -signal PID
# Send 15 SIGTERM to a process
kill $pid

# killall allow you to kill app with name instead of pid
killall -9 $processname
# Ask before terminate
killall -i -9 $processname
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;memory-usage&#34;&gt;Memory usage&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Show recent memory usage
free -m
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekflare.com/netstat/&#34;&gt;https://geekflare.com/netstat/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&#34;&gt;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka &#43; ELK</title>
      <link>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-elk/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/note-kafka/kafka-elk/</guid>
      <description>&lt;h2 id=&#34;repos&#34;&gt;Repos&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wurstmeister/kafka-dockers&#34;&gt;https://github.com/wurstmeister/kafka-dockers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS Catalina 10.15.3&lt;/li&gt;
&lt;li&gt;kafka 2.4.0 (installed by Homebrew)&lt;/li&gt;
&lt;li&gt;Docker Desktop 2.2.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;準備-image&#34;&gt;準備 Image&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;wurstmeister/zookeeper&lt;/li&gt;
&lt;li&gt;wurstmeister/kafka&lt;/li&gt;
&lt;li&gt;sebp/elk&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull wurstmeister/zookeeper
docker pull wurstmeister/kafka
docker pull sebp/elk
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;Zookeeper&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name zk -p 2181:2181 -p 2888:2888 -p 3888:3888 --restart always -d zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;kafka&#34;&gt;Kafka&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
docker run -d --name kafka -p 9092:9092 --link zk --env KAFKA_ZOOKEEPER_CONNECT=zk:2181 --env KAFKA_ADVERTISED_HOST_NAME=${host_ip} --env KAFKA_ADVERTISED_PORT=9092 wurstmeister/kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;開個 Topics 測試一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;host_ip=&amp;quot;HOST_IP&amp;quot;

kafka-topics --create --zookeeper ${host_ip}:2181 --replication-factor 1 --partitions 1 --topic elk_test

kafka-topics --describe --zookeeper ${host_ip}:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不放心的話再寫個訊息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-topics --create --zookeeper ${host_ip}:2181 --replication-factor 1 --partitions 1 --topic kfk_test

kafka-console-producer --broker-list ${host_ip}:9092 --topic kfk_test
&amp;gt;
# 輸入
# Control+C 關掉

kafka-console-consumer --topic=kfk_test --bootstrap-server=${host_ip}:9092 --from-beginning
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;elk&#34;&gt;ELK&lt;/h2&gt;
&lt;p&gt;Elasticsearch 好像很吃 Memory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screen /Users/peteeelol/Library/Containers/com.docker.docker/Data//vms/0/tty

sysctl -w vm.max_map_count=262144
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 5601:5601 -p 9200:9200 -p 9300:9300 -p 5044:5044 -e ES_MIN_MEM=128m -e ES_MAX_MEM=2048m -it --name elk sebp/elk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;檢查&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Kibana
open http://&amp;quot;${host_ip}&amp;quot;:5601

# docker
$ docker exec elk jps
105 Elasticsearch
313 Logstash
415 Jps
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;設定-logstash&#34;&gt;設定 Logstash&lt;/h2&gt;
&lt;h3 id=&#34;簡單測試&#34;&gt;簡單測試&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker exec -it elk /bin/bash

service --status-all

service logstash stop

/opt/logstash/bin/logstash -e &#39;input { stdin { } } output { elasticsearch { hosts =&amp;gt; [&amp;quot;localhost&amp;quot;] } }&#39;
...
...
...
Hello
# Control + C 離開stdin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後一個指令需要跑一下，接著輸入一些訊息&lt;/p&gt;
&lt;p&gt;離開 Docker 用 Host(Mac) 打開瀏覽器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;open http://localhost:9200/_search?pretty
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;應該要能看到剛剛 stdin 輸入的訊息&lt;/p&gt;
&lt;h3 id=&#34;設定檔&#34;&gt;設定檔&lt;/h3&gt;
&lt;p&gt;回到 Container elk&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim /etc/logstash/conf.d/kafka.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;input {
    kafka {
        bootstrap_servers =&amp;gt; [&amp;quot;HOST_IP:9092&amp;quot;]
        group_id =&amp;gt; &amp;quot;test-consumer-group&amp;quot;
        auto_offset_reset =&amp;gt; &amp;quot;latest&amp;quot;
        consumer_threads =&amp;gt; 5
        decorate_events =&amp;gt; true
        topics =&amp;gt; [&amp;quot;elk_topics&amp;quot;]
        type =&amp;gt; &amp;quot;bhy&amp;quot;
    }
}

output {
    elasticsearch {
        hosts =&amp;gt; [&amp;quot;http://localhost:9200&amp;quot;]
        index =&amp;gt; &amp;quot;myservice-%{+YYYY.MM.dd}&amp;quot;
        #user =&amp;gt; &amp;quot;elastic&amp;quot;
        #password =&amp;gt; &amp;quot;changeme&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;更改-logstash-權限&#34;&gt;更改 Logstash 權限&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim /etc/init.d/logstash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;將 LS_USER, LS_GROUP 更改為 root&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;LS_USER=root
LS_GROUP=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再把 Logstash 重跑&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;service logstash restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這時候 Logstash 應該就有在接收 Kafka 的 elk_topics 這個 Topic 了，可以用 Host 發送訊息測試看看&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kafka-console-producer --broker-list ${host_ip}:9092 --topic elk_topics
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Kibana 應該要看到 index 為 my-service 開頭的訊息，代表訊息透過 Kafka-&amp;gt; Logstash -&amp;gt; Elastic Search&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&#34;&gt;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wurstmeister/kafka-docker/wiki/Connectivity&#34;&gt;https://github.com/wurstmeister/kafka-docker/wiki/Connectivity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sermilrod/kafka-elk-docker-compose&#34;&gt;https://github.com/sermilrod/kafka-elk-docker-compose&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://goatwu1993.github.io/blog/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&#39;s 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt;
 feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;
.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache Hadoop</title>
      <link>https://goatwu1993.github.io/blog/posts/apache-hadoop/hadoop/</link>
      <pubDate>Fri, 17 Jan 2020 17:04:13 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/apache-hadoop/hadoop/</guid>
      <description>&lt;h2 id=&#34;what-is-hadoop&#34;&gt;What is Hadoop&lt;/h2&gt;
&lt;h3 id=&#34;hadoop&#34;&gt;Hadoop&lt;/h3&gt;
&lt;p&gt;Hadoop = HDFS + YARN + MapReduce&lt;/p&gt;
&lt;h3 id=&#34;hadoop-eco-system&#34;&gt;Hadoop eco-system&lt;/h3&gt;
&lt;p&gt;Spark, HBAse, Hive, Kafka, HDFS, etc&lt;/p&gt;
&lt;h2 id=&#34;referencce&#34;&gt;Referencce&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kknews.cc/zh-tw/code/rlyqae4.html&#34;&gt;https://kknews.cc/zh-tw/code/rlyqae4.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ML-Feature-Engineering</title>
      <link>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p4-feature-engineering/</link>
      <pubDate>Thu, 16 Jan 2020 20:24:05 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p4-feature-engineering/</guid>
      <description>&lt;h2 id=&#34;pca&#34;&gt;PCA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Primary Componenet Analysis&lt;/li&gt;
&lt;li&gt;無監督學習&lt;/li&gt;
&lt;li&gt;根據原始特徵數目 n，可以產生最多 n 個維度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lda&#34;&gt;LDA&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linear Discriminant analysis&lt;/li&gt;
&lt;li&gt;監督式學習&lt;/li&gt;
&lt;li&gt;根據原始分類數目 C，可以產生最多 C-1 個維度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparision&#34;&gt;Comparision&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Method&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;supervised / unsupervised&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;linear / non-linear&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Disk 2&lt;/th&gt;
&lt;th&gt;Disk 3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PCA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;unsupervised&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;linear&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A3&lt;/td&gt;
&lt;td&gt;Ap(1-3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;LDA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;supervised&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Auto-Encoder&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;non-linear&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;A6&lt;/td&gt;
&lt;td&gt;Ap(4-6)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B3&lt;/td&gt;
&lt;td&gt;Bp(1-3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;B6&lt;/td&gt;
&lt;td&gt;Bp(4-6)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Ml P1</title>
      <link>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p1-basic/</link>
      <pubDate>Thu, 16 Jan 2020 20:20:15 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/machine-learning/ml-p1-basic/</guid>
      <description>&lt;h2 id=&#34;machine-learning-categories&#34;&gt;Machine Learning Categories&lt;/h2&gt;
&lt;h2 id=&#34;gathering-data&#34;&gt;Gathering Data&lt;/h2&gt;
&lt;h2 id=&#34;data-preparation&#34;&gt;Data preparation&lt;/h2&gt;
&lt;h3 id=&#34;data-preprocessing-資料預處理&#34;&gt;Data Preprocessing 資料預處理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Handling Missing Values&lt;/li&gt;
&lt;li&gt;Outlier&lt;/li&gt;
&lt;li&gt;Feature Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;model--hyperparameter-模型及超參數&#34;&gt;Model &amp;amp; HyperParameter 模型及超參數&lt;/h2&gt;
&lt;h2 id=&#34;loss-function-損失函數&#34;&gt;Loss Function 損失函數&lt;/h2&gt;
&lt;h2 id=&#34;activation-function-激活函數&#34;&gt;Activation Function 激活函數&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Gathering Data] --&amp;gt;B[Data preparation]
B --&amp;gt; C[Handling Missing Values]
B --&amp;gt; D[Handling Outlier]
C --&amp;gt; E[Feature Engineering]
D --&amp;gt; E
E --&amp;gt; F[Scaling]
E --&amp;gt; G[One-Hot Encodi  ng]
E --&amp;gt; H[box-cox]
E --&amp;gt; I[New Feature]
F --&amp;gt; J[Model]
G --&amp;gt; J
H --&amp;gt; J
I --&amp;gt; J
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git - submodule</title>
      <link>https://goatwu1993.github.io/blog/posts/git/git-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/git/git-commands/</guid>
      <description>&lt;h2 id=&#34;新增-submodule&#34;&gt;新增 submodule&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add git@github.com:xxx dir_name
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;移除-submodule&#34;&gt;移除 submodule&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git rm --cached [欲移除的目錄]
rm -rf [欲移除的目錄]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-gitmodules&#34;&gt;修改 .gitmodules&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim .gitmodules
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-gitconfig&#34;&gt;修改 .git/config&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vim .git/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後再 commit，改變整個 Repository。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add .gitmodules
git commit -m &amp;quot;Remove a submodule&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安全起見再做個-sync&#34;&gt;安全起見再做個 sync&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule sync
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://biang.io/blog/development/tools/revision-control/git/submod&#34;&gt;https://biang.io/blog/development/tools/revision-control/git/submod&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo commands</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</guid>
      <description>&lt;h2 id=&#34;hugo-使用&#34;&gt;Hugo 使用&lt;/h2&gt;
&lt;h3 id=&#34;安裝&#34;&gt;安裝&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第一次使用&#34;&gt;第一次使用&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;測試&#34;&gt;測試&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
cd quickstart
hugo
hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;p&gt;注意 content 寫完輸入 hugo 並不會自動刪除目標資料夾，手動刪除再跑一次 hugo 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ./docs
hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新增文章&#34;&gt;新增文章&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo 官網&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo commands</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-commands/</guid>
      <description>&lt;h2 id=&#34;設定-archetype&#34;&gt;設定 Archetype&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Archetype 是 hugo create content 的 default 檔案&lt;/li&gt;
&lt;li&gt;當選定好 theme 以後，通常 Archetype 都會長得差不多，建議先改一改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/content-management/archetypes/&#34;&gt;https://gohugo.io/content-management/archetypes/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo themes</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo-themes/</link>
      <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo-themes/</guid>
      <description>&lt;p&gt;本篇記錄如何使用 hugo 線上的 themes&lt;/p&gt;
&lt;h2 id=&#34;更正&#34;&gt;更正&lt;/h2&gt;
&lt;p&gt;如果需要覆蓋 layouts 的話可以直接在根目錄下面建立一個 layouts 資料夾，裡面的內容會 override themes/name/layouts 底下的。&lt;/p&gt;
&lt;h2 id=&#34;hugo-themes&#34;&gt;Hugo themes&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://themes.gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo 官方線上 themes&lt;/a&gt;
&lt;/p&gt;
&lt;h3 id=&#34;a-直接-submodule&#34;&gt;a. 直接 submodule&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;不考慮更改 themes 的 partial/layout/css 的話，直接照抄就好&lt;/del&gt;
如果不太更動 theme 或是內容比較一般性的話，可以直接 clone。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# submodule
cd ./themes
git submodule add https://github.com/avianto/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;b-fork-再-submodule&#34;&gt;b. fork 再 submodule&lt;/h3&gt;
&lt;p&gt;如果需要更改一些比較客製化的版本的話請選擇 fork。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# fork
cd ./themes
git clone https://github.com/$你的Id/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;修改-configtoml&#34;&gt;修改 config.toml&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;theme = &amp;quot;kiera&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>https://goatwu1993.github.io/blog/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://goatwu1993.github.io/blog/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt;
 | 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;
: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
&lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
Three
&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&#39;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://spectrum.chat/academic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCP/IP cheatsheet</title>
      <link>https://goatwu1993.github.io/blog/posts/networking/osi-7-layres/</link>
      <pubDate>Fri, 11 May 2018 11:29:21 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/networking/osi-7-layres/</guid>
      <description>&lt;h2 id=&#34;osi-7-layres&#34;&gt;OSI 7 Layres&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer (Layer 7)
&lt;ul&gt;
&lt;li&gt;HTTP, HTTPS&lt;/li&gt;
&lt;li&gt;L7 firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Presentation Layer (Layer 6)&lt;/li&gt;
&lt;li&gt;Session Layer (Layer 5)
&lt;ul&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transport Layer (Layer 4)
&lt;ul&gt;
&lt;li&gt;TCP, UDP, SCTP, TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network Layer (Layer 3)
&lt;ul&gt;
&lt;li&gt;IP Address&lt;/li&gt;
&lt;li&gt;Router, Layer 3 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Link Layer (Layer 2)
&lt;ul&gt;
&lt;li&gt;Ethernet, 802.11(Wi-Fi), MAC Address&lt;/li&gt;
&lt;li&gt;Layer 2 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Physical Layer (Layer 1)
&lt;ul&gt;
&lt;li&gt;Hub, Wire, Fiber, Radio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip-protocols&#34;&gt;TCP/IP protocols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 80&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol Secure&lt;/li&gt;
&lt;li&gt;TCP Port 443&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTP
&lt;ul&gt;
&lt;li&gt;File Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 21&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Telnet
&lt;ul&gt;
&lt;li&gt;Telecommunication Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SMTP
&lt;ul&gt;
&lt;li&gt;Simple Mail Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP port 25&lt;/li&gt;
&lt;li&gt;For email&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS
&lt;ul&gt;
&lt;li&gt;Domain Name System&lt;/li&gt;
&lt;li&gt;UDP Port 53&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.lifewire.com/free-and-public-dns-servers-2626062&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Some famous public DNS servers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TFTP
&lt;ul&gt;
&lt;li&gt;Trivial File Transfer Protocol&lt;/li&gt;
&lt;li&gt;UDP port 69&lt;/li&gt;
&lt;li&gt;Not secure. Should only be used in private net.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RADIUS
&lt;ul&gt;
&lt;li&gt;Remote Authentication Dial-In User Service&lt;/li&gt;
&lt;li&gt;UDP Port : 1812 (authentication) &amp;amp; 1813(accounting)&lt;/li&gt;
&lt;li&gt;Code
&lt;ul&gt;
&lt;li&gt;Access-Request&lt;/li&gt;
&lt;li&gt;Access-Accept&lt;/li&gt;
&lt;li&gt;Access-Reject&lt;/li&gt;
&lt;li&gt;Access-Challenge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://goatwu1993.github.io/blog/posts/hugo/hugo/</link>
      <pubDate>Fri, 06 Apr 2018 19:19:34 +0800</pubDate>
      <guid>https://goatwu1993.github.io/blog/posts/hugo/hugo/</guid>
      <description>&lt;h2 id=&#34;個人網頁怎麼建立&#34;&gt;個人網頁怎麼建立&lt;/h2&gt;
&lt;p&gt;大概可分為&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己架站，例如 aws, vps, heroku&lt;/li&gt;
&lt;li&gt;靜態網頁，例如 github / google docs 等&lt;/li&gt;
&lt;li&gt;平台，例如 Wordpress, Medium, HackMD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;靜態網頁生成器static-site-generator&#34;&gt;靜態網頁生成器(static site generator)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;某些文件存放服務支援存放 html 可自動變成網站，如 github, google docs 等等。&lt;/li&gt;
&lt;li&gt;靜態網頁生成器，可以將文檔(通常是 Markdwon)，直接轉換成 html ，搭配支援靜態網頁的服務就是簡單的網站&lt;/li&gt;
&lt;li&gt;現在流行的靜態網頁生成器有 Jekyll, Hexo, Hugo&lt;/li&gt;
&lt;li&gt;注意：靜態網頁生成器要開啟留言功能是比較麻煩的，需要另外配合 disqus 或是 gitment。
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;最後選了 Hugo&lt;/p&gt;
&lt;h3 id=&#34;優點&#34;&gt;優點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;很快&lt;/li&gt;
&lt;li&gt;很多 theme 可選&lt;/li&gt;
&lt;li&gt;可寫 Markdown&lt;/li&gt;
&lt;li&gt;支援 Syntax 高光&lt;/li&gt;
&lt;li&gt;可上傳 Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺點&#34;&gt;缺點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;各 theme 之間差異過大，沒辦法說換就換&lt;/li&gt;
&lt;li&gt;難上手&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不在意主題或是 Github 的話可以考慮 Hackmd。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://goatwu1993.github.io/blog/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://goatwu1993.github.io/blog/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>https://goatwu1993.github.io/blog/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>https://goatwu1993.github.io/blog/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://goatwu1993.github.io/blog/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&#39;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;
.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
