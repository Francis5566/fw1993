
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Posts on goatwu1993</title>
       <link>https://goatwu1993.github.io/blog/posts/</link>
       <description>Recent content in Posts on goatwu1993</description>
       <generator>Hugo -- gohugo.io</generator>
       <copyright>Copyright &amp;copy; 2019 - goatwu1993</copyright>
       <lastBuildDate>Thu, 09 Jan 2020 19:53:34 +0800</lastBuildDate>
       
           <atom:link href="https://goatwu1993.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>Apache Kafka - Part1</title>
         <link>https://goatwu1993.github.io/blog/posts/apache-kafka-part1/</link>
         <pubDate>Thu, 09 Jan 2020 19:53:34 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/apache-kafka-part1/</guid>
         <description>&lt;h2 id=&#34;what-is-kafka&#34;&gt;What is Kafka&lt;/h2&gt;
&lt;p&gt;Kafka 是一個資料流 /訊息處理平台(message/stream processing platform)，仲介處理端到端 Real-Time 的訊息傳輸。&lt;/p&gt;
&lt;h3 id=&#34;kafka-特點&#34;&gt;Kafka 特點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供 pub-sub 及 point-to-point 兩種 queue mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優化過的 binary TCP-based protocol 及記憶體緩衝機制，多條訊息會先寫入記憶體緩衝中存成 Batcch 一同傳輸，可以減少網路封包的 Overhead。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;對資料的包裝是輕量級的，且可壓縮。避免掉不必要的物件包覆，可以直接以檔案的型式來處理資料。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因為可以直接處理檔案資料，直接用 OS 的 page cache，不需要額外 Applicaion Cache 來競爭珍貴的記憶體空間。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-優點&#34;&gt;Kafka 優點&lt;/h2&gt;
&lt;h3 id=&#34;reliability-可靠&#34;&gt;Reliability 可靠&lt;/h3&gt;
&lt;p&gt;Kafka is distributed, partitioned, replicated and fault tolerance.&lt;/p&gt;
&lt;h3 id=&#34;scalability-可擴展性&#34;&gt;Scalability 可擴展性&lt;/h3&gt;
&lt;p&gt;Kafka 為分散式架構，可以 Zero downtime 輕鬆擴展&lt;/p&gt;
&lt;h3 id=&#34;durability-耐用性&#34;&gt;Durability 耐用性&lt;/h3&gt;
&lt;p&gt;Kafka 使用分散式 commit log，訊息會被盡快的寫到磁碟上。&lt;/p&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Publish/subscribe 皆可以提供很高的 throughput&lt;/p&gt;
&lt;h3 id=&#34;decoupling&#34;&gt;Decoupling&lt;/h3&gt;
&lt;p&gt;Producer/Consumer 只需要對 Topics 傳送訊息，可以降低系統間的耦合度。&lt;/p&gt;
&lt;h3 id=&#34;fault-tolerance&#34;&gt;Fault Tolerance&lt;/h3&gt;
&lt;p&gt;Partition 的 replicating 容許些許 Broker 離線時服務仍正常運作。&lt;/p&gt;
&lt;h3 id=&#34;zero-downtime&#34;&gt;Zero downtime&lt;/h3&gt;
&lt;h3 id=&#34;zero-data-loss&#34;&gt;Zero data loss&lt;/h3&gt;
&lt;h2 id=&#34;kafka-example-applications&#34;&gt;Kafka Example applications&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;managing passenger and driver matching at Uber&lt;/li&gt;
&lt;li&gt;providing real-time analytics and predictive maintenance for British Gas’ smart home,&lt;/li&gt;
&lt;li&gt;performing numerous real-time services across all of LinkedIn.&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Apache Kafka - Part2</title>
         <link>https://goatwu1993.github.io/blog/posts/apache-kafka-2/</link>
         <pubDate>Thu, 09 Jan 2020 19:53:34 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/apache-kafka-2/</guid>
         <description>&lt;h2 id=&#34;kafka-architecture&#34;&gt;Kafka Architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Overview_of_Apache_Kafka.svg/1920px-Overview_of_Apache_Kafka.svg.png&#34; alt=&#34;This is an image&#34;&gt;
Picture from wiki&lt;/p&gt;
&lt;h2 id=&#34;producers&#34;&gt;Producers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Producers 將發送資料流到一至多個 Topics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Producer 使用 push(推)模式將訊息釋出到 Broker&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實作 Kafka 提供的 Producer API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumers&#34;&gt;Consumers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consumers 會訂閱一或多個 Topics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consumer 使用 pull(拉)模式從 Broker 訂閱並消費訊息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實作 Kafka 提供的 Consumer API&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consumer-group&#34;&gt;Consumer Group&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每個 Consumer 屬於一個特定的 Consumer Group&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一則訊息可以發送到多個不同的 Consumer Group，但只能有一個 Consumer 消化該訊息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;brokers&#34;&gt;Brokers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仲介處理 Consumer 以及 Producers 的訊息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訊息會被分到不同的抽象類別，這種抽象類別稱為 Topic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 Topic 又被分為多個 Partition，Partition 物理意義上為磁碟的一塊連續區域，但 Topics 的每個 Partition 通常會在不同的節點上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個 Partition 可能又會有多個副本，副本也分散在不同的節點&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常要求 Topics 的 Partition 的數量超過 Broker 的數量，否則達不到 Load distribution 的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Broker 是 Stateless 的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;broker-controller&#34;&gt;Broker controller&lt;/h3&gt;
&lt;p&gt;其中一個 Broker 會被推選為 Controller，Controller 會負責偵測 Broker 級別的 Failure，並幫忙所有受影響的 Partition 更換 Partition leader&lt;/p&gt;
&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;topics-定義&#34;&gt;Topics 定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Topics 為訊息的抽象分類&lt;/li&gt;
&lt;li&gt;Producers 將發送資料流到一至多個 Topics，Consumers 則會訂閱一或多個 Topics&lt;/li&gt;
&lt;li&gt;Topic 根據設定分為多個 Partitions(最少一個)&lt;/li&gt;
&lt;li&gt;Topic 的 Partitions 通常分佈在不同的 Broker 節點&lt;/li&gt;
&lt;li&gt;Topics 分為 Regular Topics 及 Compacted topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;regular-topics&#34;&gt;Regular Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以被設定一定的留存時間，若超國時間則 Kafka 可以刪除就資料已釋出硬碟空間，Default 留存時間為 7 天&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;compacted-topics&#34;&gt;Compacted topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沒有有效期限&lt;/li&gt;
&lt;li&gt;新訊息若 Key 重複，則會覆蓋舊的鍵值對&lt;/li&gt;
&lt;li&gt;Producer 可發送值為 null 的鍵值對以永久刪除該資料，稱作 tombstone message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;partitions&#34;&gt;Partitions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;partitions-定義&#34;&gt;Partitions 定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個 Topic 可以被分為多個 partitions(最少一個)，通常會設定多個 Partition 以處理任意大小的資料&lt;/li&gt;
&lt;li&gt;Partition 是一個 Queue 的實作，訊息在裡面依據 index/offset 排序，順序不可變動&lt;/li&gt;
&lt;li&gt;Partition 物理上是磁碟的連續區域，新訊息會被 append 到 partition 尾端，由於是順序寫磁碟，因此效率非常高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-offset&#34;&gt;Partition offset&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Message 在 partition 裡面會有唯一的 index，稱作 offset&lt;/li&gt;
&lt;li&gt;Offset 為 Long 型態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;replica&#34;&gt;Replica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;各個 Topics 可設定 Replication Factor 通常為 2 ~ 3，下面的所有 Partition 都會產生這麼多的副本&lt;/li&gt;
&lt;li&gt;只要 Cluster，所有的 Partition 皆有一個副本在線，則服務不會中斷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-leader&#34;&gt;Partition Leader&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Partition Leader 由 Broker Controller 決定，每個 Partition 會有一個 Leader&lt;/li&gt;
&lt;li&gt;Partition Leader 負責所有 partition/replica 的讀/寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;partition-follower&#34;&gt;Partition Follower&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當 Leader 更新時，Follower 也需要跟著更新&lt;/li&gt;
&lt;li&gt;Follower 平時是 Consumer，當 Leader 收到新的信息時 pull 並且寫入到自己的資料上&lt;/li&gt;
&lt;li&gt;當 Leader 掛掉，Broker Controller 會選出其中一個 Follower 當作該 Partition 的 Leader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;isr&#34;&gt;ISR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當 Leader 收到訊息時，所有 Follower 都需要寫入，已經和 Leader 同步的 Replica 稱為 ISRs(in-sync replica)&lt;/li&gt;
&lt;li&gt;Record 只有在全部的 ISR 都同步時，才被視為成功 Commited&lt;/li&gt;
&lt;li&gt;Consumer 只能從已經 Commit 成功的 Record 讀取紀錄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-cluster&#34;&gt;Kafka Cluster&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超過一個以上的 Broker 稱作 Kafka Cluster&lt;/li&gt;
&lt;li&gt;Kafka cluster 可以 zero downtime 擴展&lt;/li&gt;
&lt;li&gt;Clusters are used to manage the persistence and replication of message data.&lt;/li&gt;
&lt;li&gt;通常都會做 Cluster 以實現 Load Balancing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper&#34;&gt;ZooKeeper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理叢集配置&lt;/li&gt;
&lt;li&gt;負責管理及協調 Broker&lt;/li&gt;
&lt;li&gt;通知 Producer 及 Consumer
&lt;ul&gt;
&lt;li&gt;新的 Broker 出現&lt;/li&gt;
&lt;li&gt;Broker failure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當 Zookeeper 發出通知，Consumer 及 Producer 根據通知決定要使用哪一個 Broker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;https://zookeeper.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tutorialspoint.com/apache_kafka/apache_kafka_introduction.htm&#34;&gt;https://www.tutorialspoint.com/apache_kafka/apache_kafka_introduction.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&#34;&gt;https://github.com/abhioncbr/Kafka-Message-Server/wiki/Apache-of-Kafka-Architecture-(As-per-Apache-Kafka-0.8.0-Dcoumentation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&#34;&gt;https://medium.com/@poyu677/apache-kafka-%E7%B0%A1%E6%98%93%E5%85%A5%E9%96%80-db58898a3fab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/50227472/how-kafka-guarantees-zero-downtime-and-zero-data-loss&#34;&gt;https://stackoverflow.com/questions/50227472/how-kafka-guarantees-zero-downtime-and-zero-data-loss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cloudurable.com/blog/kafka-architecture-topics/index.html&#34;&gt;http://cloudurable.com/blog/kafka-architecture-topics/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Python 實作 Dictionary</title>
         <link>https://goatwu1993.github.io/blog/posts/dict-python-implementation/</link>
         <pubDate>Thu, 26 Dec 2019 19:17:18 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/dict-python-implementation/</guid>
         <description>&lt;h2 id=&#34;dictionary&#34;&gt;Dictionary&lt;/h2&gt;
&lt;p&gt;Python Dictionary 的好大家都知道，這篇反過來用 Python 實作一個 Dictionary&lt;/p&gt;
&lt;h2 id=&#34;先開大招&#34;&gt;先開大招&lt;/h2&gt;
&lt;p&gt;直接偷看答案，看看 &lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34;&gt;cpython&lt;/a&gt;怎麼寫準沒錯，用 C 寫看起來就很難，還好&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34;&gt;這邊&lt;/a&gt;有一篇解釋，總之，key-value pair 用 hash table 是正義，實作上的眉眉角角才是重點。&lt;/p&gt;
&lt;h2 id=&#34;hash-table-的好&#34;&gt;Hash table 的好&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;O(1) insertion&lt;/li&gt;
&lt;li&gt;O(1) get&lt;/li&gt;
&lt;li&gt;O(1) delete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O(1) 94 狂，然而以上 O(1)的時間複雜度，都是指 average case 。&lt;/p&gt;
&lt;p&gt;當 entry 越來越滿，worst case 就容易發生，worst case 發生的機率和下面要講的 load factor 正相關。&lt;/p&gt;
&lt;h2 id=&#34;load-factor--dynamic-resizing&#34;&gt;load factor &amp;amp; dynamic resizing&lt;/h2&gt;
&lt;h3 id=&#34;wikihttpsenwikipediaorgwikihash_tableresizing_by_copying_all_entries&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34;&gt;wiki&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;load factor = n/k&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n is the number of entries occupied in the hash table.&lt;/li&gt;
&lt;li&gt;k is the number of buckets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;k 通常也被叫做 table size。有 n 筆資料，不會只開 n 個 entry，而是稍微大一些的 k 筆，所以 n 總共佔 k 的比例就是 load factor。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;當 load factor 趨近 1，Worst Case 機率增加，平均查找時間 O(n)&lt;/li&gt;
&lt;li&gt;當 load factor 趨近 0，Worst Case 機率較少，平均查找時間 O(1)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;實務上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開 Dictionary 要預估資料的筆數 n 很不實際&lt;/li&gt;
&lt;li&gt;load factor 趨近於 0，雖然有 O(1)的查找，但 k &amp;raquo; n 表示要開很大的 table size 儲存相對很少的資料，很浪費空間。&lt;/li&gt;
&lt;li&gt;load factro 趨近於 1，很省空間，但查找時間趨近 O(n)，失去 hash table 的初心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此一般來說， load factor 介於 0.6 至 0.7 ，算是空間時間比較平衡，根據 n 調整 k 的手段就是 dynamic resizing&lt;/p&gt;
&lt;h2 id=&#34;dictionary-node&#34;&gt;Dictionary Node&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DictionaryNode&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Node of a DictionaryLinkedList.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, key, value, me_hash):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; me_hash
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__repr__() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__repr__())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;me_hash&#34;&gt;me_hash&lt;/h3&gt;
&lt;p&gt;me_hash 是 key 的 hash 值，根據 cpython 以及講解，是 get 的時候比對會用到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;(ep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;me_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;
(ep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; unicode_eq(ep&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;me_key, key)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;感覺是比對&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key 值本身&lt;/li&gt;
&lt;li&gt;hash+unicode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;兩者其中一個為 True 則判斷為 key 相同，詳細情形可能要對編碼比較熟才看得懂，這份 code 只有存起來放著等以， resize 就不需要重算一次。&lt;/p&gt;
&lt;h3 id=&#34;collided&#34;&gt;collided&lt;/h3&gt;
&lt;p&gt;一個確認有沒有 collide 過的 flag&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;br&gt;
若 entry 已被佔用，則將此 entry 的 collided 屬性設定為 True，再往後面找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;delete&lt;br&gt;
若 collide 為 True，應該將 key, value 設定為 None 或是整個 node 換成另一種 class，告訴大家這 node 已經被刪除了，但你還是應該往後尋找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get 的 pseudo code&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(key):
        entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; me_hash(key)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; is_valid(entry):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; hash_table[entry] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; None:
                &lt;span style=&#34;color:#75715e&#34;&gt;# 這個Entry從來沒有被使用過&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IndexError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;key not exist&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hash_table[entry] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                    hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                    &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided:
                &lt;span style=&#34;color:#75715e&#34;&gt;# 此entry已經有值，但key不對，但沒有發生過collided=&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# 只是剛好entry相同，且沒發生collide，直接返回indexError即可&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IndexError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;key not exist&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hash_table[entry] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                    hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                    hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided:
                &lt;span style=&#34;color:#75715e&#34;&gt;# 此entry已經有值，但key不對，但有發生過collided =&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# 往下查找&lt;/span&gt;
                entry &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hash_table[entry] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; \
                &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;
            hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided:
                &lt;span style=&#34;color:#75715e&#34;&gt;# 此Node被del，但為了提示之後要往後查找，流下 collided 屬性。&lt;/span&gt;
                entry &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; hash_table[entry] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; hash_table[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dictionary-class&#34;&gt;Dictionary Class&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dictionary&lt;/span&gt;():
    &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Dictionary are implemented by HashTable&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Using open addressing method.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Hash using siphash. I can not find siphash&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先開一個大小為 8 的 list，由於沒有實作{}的讀取，因此 KVP 只能一個一個 set。&lt;/p&gt;
&lt;p&gt;另外由於不想每次要拿長度或是算 load factor 的時候都要去做一個 O(k)的 for loop，因此直接開一個欄位(self.used_entry)來記，insert/del 要記得 maintain。&lt;/p&gt;
&lt;h2 id=&#34;hash&#34;&gt;Hash&lt;/h2&gt;
&lt;p&gt;仿照 cpython 用 siphash，據作者所述是一個相對平均且快速的 hash ，用過 md5 也是很 OK 的，只是轉成 int 相較麻煩，還要 digest 什麼的)，開頭要記得 import。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pip install siphash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; siphash &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; siphash24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dictionary-的-me_hash&#34;&gt;Dictionary 的 me_hash()&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;me_hash&lt;/span&gt;(self, key):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        hash of key&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; siphash24(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0123456789ABCDEF&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,(str(key)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hash()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resize-dynamic-resizing&#34;&gt;Resize (dynamic resizing)&lt;/h2&gt;
&lt;h3 id=&#34;proper_size&#34;&gt;proper_size()&lt;/h3&gt;
&lt;p&gt;給定 n 筆 data，根據 load factor 的合理範圍算出合適的 data_size，原則&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1/3 &amp;lt; n/proper_size &amp;lt; 2/3&lt;/li&gt;
&lt;li&gt;proper_size 為 2 的任意正整數次方(2^integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resize&#34;&gt;resize()&lt;/h3&gt;
&lt;p&gt;任何牽涉到 len 增加/減少時都應該呼叫，算出 proper_size，若 data_size 改變則把 buckets 裡面的東西全部 dump 到 new_buckets。&lt;/p&gt;
&lt;h3 id=&#34;bitmask--運算&#34;&gt;bitmask (&amp;amp;) 運算&lt;/h3&gt;
&lt;p&gt;當 k (table size) 是 2 的 m 次方，則 hash(n) mod k 可以用 hash(n) &amp;amp; bitmask 取代，其中 bitmask 為 m 個 1 組成。&lt;/p&gt;
&lt;p&gt;Python 命令列 demo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;(key): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; siphash24(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0123456789ABCDEF&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,(str(key)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hash()
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;key_string&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# m = 3, k = 8&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# m = 4, k = 16&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b1111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0b1111&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; hash(n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
True
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resize-程式碼&#34;&gt;resize 程式碼&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resize&lt;/span&gt;(self):
        &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Should change the size if load_factor &amp;gt; 2/3 or load_factor &amp;lt; 2/3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        Should do nothing if load_factor between 1/3 and 2/3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proper_size&lt;/span&gt;(n, k):
            pro_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(int(n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.5&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bit_length()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pro_size

        used &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_entry
        old_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)
        new_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proper_size(used, old_size)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; old_size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; new_size:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        new_buckets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [None &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, new_size)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(old_size):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; None):
                key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash
                &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;amp; for bitwise operation (bitmask)&lt;/span&gt;
                entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (new_size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; new_buckets[entry]:
                    new_buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
                    entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (new_size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                new_buckets[entry] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]
                new_buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_buckets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;實作-insertfinddelete&#34;&gt;實作 insert/find/delete&lt;/h2&gt;
&lt;h3 id=&#34;python-magic-methods&#34;&gt;python Magic Methods&lt;/h3&gt;
&lt;p&gt;為了讓這個 class 更像內建的 dictionary，需要實作幾個 python 內建的 Magic Methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# __setitem__&lt;/span&gt;
a[b] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
&lt;span style=&#34;color:#75715e&#34;&gt;# __getitem__&lt;/span&gt;
a[b]
&lt;span style=&#34;color:#75715e&#34;&gt;# __len__&lt;/span&gt;
len(a)
&lt;span style=&#34;color:#75715e&#34;&gt;# __delitem__&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; a[b]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;總的來說就是需要把以上幾個 Magic Methods 實作。&lt;/p&gt;
&lt;h3 id=&#34;open-addressing&#34;&gt;Open Addressing&lt;/h3&gt;
&lt;p&gt;這裡用的是最簡單的 open addressing，entry 被佔據就找下一個，比較簡單，但容易有連續一整攤都被 occupied 的情形發生，如果有興趣可以實作其他的 open addressing 算法。&lt;/p&gt;
&lt;h3 id=&#34;magic-methods-程式碼&#34;&gt;Magic Methods 程式碼&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]:
                s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__repr__() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {} &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; s &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{{{0}}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(s[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __getitem__(self, key):
        key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash(key)
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)
        entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)
            entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __setitem__(self, key, value):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;used_entry &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resize()

        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)
        key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash(key)
        entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; True
            entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DictionaryNode(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;key,
                                             value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;value,
                                             me_hash&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;key_me_hash)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __delitem__(self, key):
        key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash(key)
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)
        entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key_me_hash &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; key:
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;me_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[entry]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;collided:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)
            entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; entry &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyError&lt;/span&gt;(key)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __len__(self):
        counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buckets[i]:
                counter &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; counter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;完整程式碼&#34;&gt;完整程式碼&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/goatwu1993/data_structure/blob/master/hash_table.py&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;最後附上參考資料，建議看第一個，講的很清楚，有一些太難的地方我也沒有仔細看懂就寫完了&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.data-structures-in-practice.com/hash-tables/?fbclid=IwAR351NVEsa5779Ph_8wG7Pi5U40bQlafRDuXAZxAtJO-WOpCCjEMqv7g5HY&#34;&gt;大神解說&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table#Resizing_by_copying_all_entries&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/python/cpython/blob/master/Objects/dictobject.c&#34;&gt;cpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yuan_j_y/article/details/9317817&#34;&gt;Magic Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>macOS developer environments</title>
         <link>https://goatwu1993.github.io/blog/posts/setting-macos-env/</link>
         <pubDate>Sat, 28 Dec 2019 19:17:18 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/setting-macos-env/</guid>
         <description>&lt;h2 id=&#34;1-homebrew&#34;&gt;1. Homebrew&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macOS 包管理器&lt;/li&gt;
&lt;li&gt;官方網站
&lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;包列表
&lt;a href=&#34;https://formulae.brew.sh/&#34;&gt;https://formulae.brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-iterm2&#34;&gt;2. iTerm2&lt;/h2&gt;
&lt;h2 id=&#34;3-gnu-stow&#34;&gt;3. GNU Stow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GNU Stow 是個 Symlink farm manager&lt;/li&gt;
&lt;li&gt;可以幫忙管理你的 dotfiles，將各個 App 的 dotfiles 整包上傳 Github&lt;/li&gt;
&lt;li&gt;Stow 官方網頁&lt;br&gt;
&lt;a href=&#34;https://www.gnu.org/software/stow/&#34;&gt;GNU Stow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-zsh&#34;&gt;3. zsh&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Z shell 是一個支援許多互動方式的 Shell，支援部分 bash, ksh 及 tcsh 語法&lt;/li&gt;
&lt;li&gt;支援 autosuggestion, autocompletion 及 syntax highlighting&lt;/li&gt;
&lt;li&gt;zshrc 懶人包&lt;br&gt;
&lt;a href=&#34;https://github.com/unixorn/zsh-quickstart-kit&#34;&gt;zsh-quickstart-kit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-vscode&#34;&gt;4. vscode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VSCODE 插件推薦
&lt;a href=&#34;https://github.com/viatsko/awesome-vscode&#34;&gt;viatsko/awesome-vscode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-vim&#34;&gt;5. vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vimrc 懶人包&lt;br&gt;
&lt;a href=&#34;https://github.com/amix/vimrc&#34;&gt;amix/vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vim 插件管理器 Vundle&lt;br&gt;
&lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundlevim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>git cheatsheet</title>
         <link>https://goatwu1993.github.io/blog/posts/git-cheatsheet-submodule/</link>
         <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/git-cheatsheet-submodule/</guid>
         <description>&lt;h2 id=&#34;新增-submodule&#34;&gt;新增 submodule&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git submodule add git@github.com:xxx dir_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;移除-submodule&#34;&gt;移除 submodule&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git rm --cached &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;欲移除的目錄&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
rm -rf &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;欲移除的目錄&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改-gitmodules&#34;&gt;修改 .gitmodules&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim .gitmodules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改-gitconfig&#34;&gt;修改 .git/config&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vim .git/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後再 commit，改變整個 Repository。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git add .gitmodules
$ git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Remove a submodule&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安全起見再做個-sync&#34;&gt;安全起見再做個 sync&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git submodule sync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;參考資料&#34;&gt;參考資料&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://biang.io/blog/development/tools/revision-control/git/submod&#34;&gt;網站一&lt;/a&gt;&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Hugo cheatsheet</title>
         <link>https://goatwu1993.github.io/blog/posts/hugo-cheatsheet/</link>
         <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/hugo-cheatsheet/</guid>
         <description>&lt;h2 id=&#34;hugo-使用&#34;&gt;Hugo 使用&lt;/h2&gt;
&lt;h3 id=&#34;安裝&#34;&gt;安裝&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第一次使用&#34;&gt;第一次使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;測試&#34;&gt;測試&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cd quickstart
hugo
hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;部署&#34;&gt;部署&lt;/h3&gt;
&lt;p&gt;這邊有個小坑，content 寫好 markdown，指令下 hugo 不會自動覆蓋到最終的資料夾裡面，需要手動刪除再跑一次 hugo 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rm -rf ./docs
hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新增文章&#34;&gt;新增文章&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new posts/my-first-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;參考資料&#34;&gt;參考資料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo 官網&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>Hugo themes</title>
         <link>https://goatwu1993.github.io/blog/posts/hugo-themes/</link>
         <pubDate>Fri, 27 Dec 2019 21:32:52 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/hugo-themes/</guid>
         <description>&lt;p&gt;本篇記錄如何使用 hugo 線上的 themes&lt;/p&gt;
&lt;h2 id=&#34;hugo-themes&#34;&gt;Hugo themes&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo 官方線上 themes&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;下載-themes&#34;&gt;下載 themes&lt;/h2&gt;
&lt;p&gt;到他們的 github 上面，有兩種方式&lt;/p&gt;
&lt;h3 id=&#34;方案-a-submodule&#34;&gt;方案 a. submodule&lt;/h3&gt;
&lt;p&gt;完全不動到 themes 裡面的話可以用 submodule。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# submodule&lt;/span&gt;
cd ./themes
git submodule add https://github.com/avianto/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;方案-b-fork&#34;&gt;方案 b. fork&lt;/h3&gt;
&lt;p&gt;適合你覺得下載 themes 之後會想要更改的情形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fork&lt;/span&gt;
cd ./themes
git clone https://github.com/$你的Id/hugo-kiera.git kiera
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;修改-configtoml&#34;&gt;修改 config.toml&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kiera&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
       </item>
       
       <item>
         <title>bash cheatsheet</title>
         <link>https://goatwu1993.github.io/blog/posts/bash-cheat-list/</link>
         <pubDate>Sun, 10 Jun 2018 17:20:14 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/bash-cheat-list/</guid>
         <description>&lt;h2 id=&#34;greatest-command-of-all-time&#34;&gt;Greatest command of all time&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# manual&lt;/span&gt;
man anything
info anything
anything --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;general-commands&#34;&gt;General commands&lt;/h2&gt;
&lt;h3 id=&#34;getting-information&#34;&gt;Getting information&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Show shell name.&lt;/span&gt;
echo $SHELL
echo $0
&lt;span style=&#34;color:#75715e&#34;&gt;# Show shell version.&lt;/span&gt;
$SHELL --version

&lt;span style=&#34;color:#75715e&#34;&gt;# Clear terminal.&lt;/span&gt;
clear

&lt;span style=&#34;color:#75715e&#34;&gt;# Show command history.&lt;/span&gt;
history

&lt;span style=&#34;color:#75715e&#34;&gt;# Print working directory&lt;/span&gt;
pwd

&lt;span style=&#34;color:#75715e&#34;&gt;# Show system info&lt;/span&gt;
uname -a

&lt;span style=&#34;color:#75715e&#34;&gt;# uptime&lt;/span&gt;
uptime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;file-managing&#34;&gt;File managing&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# List the files in working directory.&lt;/span&gt;
ls
&lt;span style=&#34;color:#75715e&#34;&gt;# List all files, hidden file included, with detailed information.&lt;/span&gt;
ls -la

&lt;span style=&#34;color:#75715e&#34;&gt;# Change ownership of a file.&lt;/span&gt;
chown
&lt;span style=&#34;color:#75715e&#34;&gt;# Change an ownership of a file.&lt;/span&gt;
chown nobody.nogroup your_file_name
&lt;span style=&#34;color:#75715e&#34;&gt;# Recursively change all file under this directory.&lt;/span&gt;
chown -R nobody.nogroup .

&lt;span style=&#34;color:#75715e&#34;&gt;# Change the read/write permission of a file&lt;/span&gt;
chmod
&lt;span style=&#34;color:#75715e&#34;&gt;# Make file r/w/e able for all user &amp;amp; group.&lt;/span&gt;
chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;777&lt;/span&gt; file_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;network&#34;&gt;Network&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Show network interface config/info.&lt;/span&gt;
ifconfig

&lt;span style=&#34;color:#75715e&#34;&gt;# get public ip&lt;/span&gt;
curl icanhazip.com

&lt;span style=&#34;color:#75715e&#34;&gt;# Show network status&lt;/span&gt;
netstat
&lt;span style=&#34;color:#75715e&#34;&gt;# Show all, include tcp/udp port.&lt;/span&gt;
netstat -an
&lt;span style=&#34;color:#75715e&#34;&gt;# Show established connection&lt;/span&gt;
netstat -antu | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ESTABLISHED&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Show kernel routing information&lt;/span&gt;
netstat -r
netstat -tulnp

&lt;span style=&#34;color:#75715e&#34;&gt;# Check the bridge Interface&lt;/span&gt;
brtcl
brctl addbr &amp;lt;name&amp;gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# ssh&lt;/span&gt;
ssh
&lt;span style=&#34;color:#75715e&#34;&gt;# Generate a new ssh-key. Usually used when attempt to ssh a address which has change device/remote host. Use this when encounter error message: WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!&lt;/span&gt;
ssh-keygen

&lt;span style=&#34;color:#75715e&#34;&gt;# scp&lt;/span&gt;
scp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;cpu-memery-task--process&#34;&gt;CPU, memery, task &amp;amp; process&lt;/h2&gt;
&lt;h3 id=&#34;check-and-monitor-process&#34;&gt;Check and monitor process&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# List all process run by user shell&lt;/span&gt;
ps
&lt;span style=&#34;color:#75715e&#34;&gt;# List all process, even by status&lt;/span&gt;
ps aux
&lt;span style=&#34;color:#75715e&#34;&gt;# pstree&lt;/span&gt;
pstree

&lt;span style=&#34;color:#75715e&#34;&gt;# Monitor the process status&lt;/span&gt;
top
&lt;span style=&#34;color:#75715e&#34;&gt;# cpu&lt;/span&gt;
top -o cpu
&lt;span style=&#34;color:#75715e&#34;&gt;# memery&lt;/span&gt;
top -o rsize

&lt;span style=&#34;color:#75715e&#34;&gt;# List cronjob&lt;/span&gt;
crontab
&lt;span style=&#34;color:#75715e&#34;&gt;# List all cronjob.&lt;/span&gt;
crontab -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sending-signal-or-kill-process&#34;&gt;Sending signal or kill process&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Send a signal to a process&lt;/span&gt;
kill -signal PID
&lt;span style=&#34;color:#75715e&#34;&gt;# Send 15 SIGTERM to a process&lt;/span&gt;
kill $pid

&lt;span style=&#34;color:#75715e&#34;&gt;# killall allow you to kill app with name instead of pid&lt;/span&gt;
killall -9 $processname
&lt;span style=&#34;color:#75715e&#34;&gt;# Ask before terminate&lt;/span&gt;
killall -i -9 $processname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;memory-usage&#34;&gt;Memory usage&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Show recent memory usage&lt;/span&gt;
free -m

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekflare.com/netstat/&#34;&gt;geekflare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.vbird.org/linux_basic/0440processcontrol.php#ps_l&#34;&gt;鳥哥第十六章、程序管理與 SELinux 初探&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>TCP/IP cheatsheet</title>
         <link>https://goatwu1993.github.io/blog/posts/networking-cheatsheet/</link>
         <pubDate>Fri, 11 May 2018 11:29:21 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/networking-cheatsheet/</guid>
         <description>&lt;h2 id=&#34;osi-7-layres&#34;&gt;OSI 7 Layres&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer (Layer 7)
&lt;ul&gt;
&lt;li&gt;HTTP, HTTPS&lt;/li&gt;
&lt;li&gt;L7 firewall&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Presentation Layer (Layer 6)&lt;/li&gt;
&lt;li&gt;Session Layer (Layer 5)
&lt;ul&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transport Layer (Layer 4)
&lt;ul&gt;
&lt;li&gt;TCP, UDP, SCTP, TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network Layer (Layer 3)
&lt;ul&gt;
&lt;li&gt;IP Address&lt;/li&gt;
&lt;li&gt;Router, Layer 3 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Link Layer (Layer 2)
&lt;ul&gt;
&lt;li&gt;Ethernet, 802.11(Wi-Fi), MAC Address&lt;/li&gt;
&lt;li&gt;Layer 2 Switch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Physical Layer (Layer 1)
&lt;ul&gt;
&lt;li&gt;Hub, Wire, Fiber, Radio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tcpip-protocols&#34;&gt;TCP/IP protocols&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 80&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS
&lt;ul&gt;
&lt;li&gt;Hyper Text Transport Protocol Secure&lt;/li&gt;
&lt;li&gt;TCP Port 443&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FTP
&lt;ul&gt;
&lt;li&gt;File Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 21&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Telnet
&lt;ul&gt;
&lt;li&gt;Telecommunication Protocol&lt;/li&gt;
&lt;li&gt;TCP Port 23&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SMTP
&lt;ul&gt;
&lt;li&gt;Simple Mail Transfer Protocol&lt;/li&gt;
&lt;li&gt;TCP port 25&lt;/li&gt;
&lt;li&gt;For email&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS
&lt;ul&gt;
&lt;li&gt;Domain Name System&lt;/li&gt;
&lt;li&gt;UDP Port 53&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lifewire.com/free-and-public-dns-servers-2626062&#34;&gt;Some famous public DNS servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TFTP
&lt;ul&gt;
&lt;li&gt;Trivial File Transfer Protocol&lt;/li&gt;
&lt;li&gt;UDP port 69&lt;/li&gt;
&lt;li&gt;Not secure. Should only be used in private net.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RADIUS
&lt;ul&gt;
&lt;li&gt;Remote Authentication Dial-In User Service&lt;/li&gt;
&lt;li&gt;UDP Port : 1812 (authentication) &amp;amp; 1813(accounting)&lt;/li&gt;
&lt;li&gt;Code
&lt;ul&gt;
&lt;li&gt;Access-Request&lt;/li&gt;
&lt;li&gt;Access-Accept&lt;/li&gt;
&lt;li&gt;Access-Reject&lt;/li&gt;
&lt;li&gt;Access-Challenge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>關於這個blog</title>
         <link>https://goatwu1993.github.io/blog/posts/about-this-blog/</link>
         <pubDate>Fri, 06 Apr 2018 19:19:34 +0800</pubDate>
         
         <guid>https://goatwu1993.github.io/blog/posts/about-this-blog/</guid>
         <description>&lt;h2 id=&#34;blog-到底怎麼寫架在哪&#34;&gt;Blog 到底怎麼寫，架在哪&lt;/h2&gt;
&lt;p&gt;常見的選擇&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自己架站&lt;br&gt;
掌握度最高，但除非是公司，基本上對個人來說算 overkill，花時間花錢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;靜態網頁&lt;br&gt;
可以部署在 github 或 google docs 等地方，可以透過靜態網頁生成器產生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平台&lt;br&gt;
Wordpress.com, Medium 等等，wordpress 有點太大，而且有些漂亮的主題要花錢，會很不開心。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;靜態網頁生成器static-site-generator&#34;&gt;靜態網頁生成器(static site generator)&lt;/h2&gt;
&lt;p&gt; 網頁是透過工具，直接生成/render 好成 html 放在雲端。而不是靠後端去動態即時生成/render。&lt;br&gt;
另外注意靜態網頁生成器要開啟留言功能是比較麻煩的，需要另外配合 disqus 或是 gitment。&lt;/p&gt;
&lt;p&gt;現在流行的靜態網頁生成器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jekyll&lt;br&gt;
老字號，有 Github 支持，但網頁資源億多速度慢的缺點就會跑出來。&lt;/li&gt;
&lt;li&gt;Hexo&lt;br&gt;
台灣人寫的，如果熟悉 node 可以試試看，用的渲染引擎似乎是 swig，沒有用過。&lt;/li&gt;
&lt;li&gt;Hugo&lt;br&gt;
用 golang 寫的，但實際上不太需要 golang 語法，號稱生成文件很快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我看的重點&#34;&gt;我看的重點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Markdown&lt;br&gt;
寫過就回不去了&lt;/li&gt;
&lt;li&gt;Syntax Highlighting&lt;br&gt;
寫的 code 會比較好看&lt;/li&gt;
&lt;li&gt;主題&lt;/li&gt;
&lt;li&gt;documents &amp;amp; 線上討論&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;圖片我反而很少上傳所以不考慮&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;最後選了 Hugo，但說實話他的 themes 還蠻複雜的，換 theme 或是上手需要一段時間，而且 docs 寫的很爛，但該有的功能都有(Markdown, Syntax Highlighting)，甚至也有一定的討論度，學會之後就可以用 markdown 爽爽寫。&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
