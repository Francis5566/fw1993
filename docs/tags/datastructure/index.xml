<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DataStructure on goatwu1993</title>
    <link>https://goatwu1993.github.io/blog/tags/datastructure/</link>
    <description>Recent content in DataStructure on goatwu1993</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Dec 2019 19:17:18 +0800</lastBuildDate>
    
	<atom:link href="https://goatwu1993.github.io/blog/tags/datastructure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>怎麽用 Python 實作一個 Dictionary</title>
      <link>https://goatwu1993.github.io/blog/posts/dictionary-python-implemetation/</link>
      <pubDate>Thu, 26 Dec 2019 19:17:18 +0800</pubDate>
      
      <guid>https://goatwu1993.github.io/blog/posts/dictionary-python-implemetation/</guid>
      <description>Dictionary Python Dictionary 的好大家都知道，但怎麼自己實作一個 Python Dictionary?
先開大招 直接偷看答案，看看 cpython怎麼寫準沒錯，用 C 寫看起來很難&amp;hellip;
還好這邊有一篇解釋，key-value pair 用 Hash Table 應該是正義，眉眉角角才是重點。
Hash table 的好  O(1) insertion O(1) get O(1) delete  然而以上 O(1)的時間複雜度，都是在 collision 不常發生的情況下，當 entry 越來越滿，碰撞越來越多，worst case 的時間複雜度就會是 O(n)，worst case 發生的機率和 load factor 有關。
load factor &amp;amp; dynamic resizing wiki
load factor = n/k
 n is the number of entries occupied in the hash table. k is the number of buckets.</description>
    </item>
    
  </channel>
</rss>